import {Inject, Injectable, Logger} from '@nestjs/common';
import {Bot, InlineKeyboard} from 'grammy';
import {BotContext} from '../interfaces/bot-context.interface';
import {BOT} from '../providers/bot.provider';
import {UserService} from './user.service';
import {InjectRepository} from '@nestjs/typeorm';
import {Repository} from 'typeorm';
import {ChannelsEntity} from '../entities/channels.entity';
import {InlineQueryResultArticle} from '@grammyjs/types/inline';
import {Conversation, createConversation} from '@grammyjs/conversations';
import {MessagesEntity} from '../entities/messages.entity';
import {Menu, MenuRange} from '@grammyjs/menu';

@Injectable()
export class MainMenuService {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private userService: UserService,
    @InjectRepository(ChannelsEntity)
    private channelsEntity: Repository<ChannelsEntity>,
    @InjectRepository(MessagesEntity)
    private messagesEntity: Repository<MessagesEntity>
  ) {
  }

  private answerMenu: Menu<BotContext>;
  private publishAnswerMenu: Menu<BotContext>;

  public init() {
    this.onInlineQueryMessage();
    this.buildPublishAnswerMenu();
    this.bot.use(
      createConversation(this.createMassMessageConversation.bind(this), 'createMessageSendCv')
    );
    this.bot.use(
      createConversation(this.answerQuestionConversation.bind(this), 'answer_conversation')
    );
    this.buildAnswerMenu();
    this.bot.use(createConversation(this.askQuestionConversation.bind(this), 'askCV'));
    this.bot.use(
      createConversation(this.createAnonymousPostConversation.bind(this), 'createAskBtnCv')
    );
    this.buildMainMenu();
    this.onStartCommand();
    this.onChatMember();
    this.onStartHandler();
  }

  private onStartCommand() {
    this.bot.command(['how_to'], (ctx) => this.replyHowToMessage(ctx));
  }

  private onChatMember(): void {
    this.bot.on(['my_chat_member'], async (ctx) => {
      const {chat, from} = ctx.myChatMember;
      await this.channelsEntity.upsert({id: chat.id, type: chat.type, mainOwner: from.id}, [
        'id',
      ]);
    });
  }

  private buildAnswerMenu(): void {
    this.answerMenu = new Menu<BotContext>('answer_menu')
      .text('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', async (ctx) => {
        await ctx.conversation.enter('answer_conversation');
      })
      .row();
    this.bot.use(this.answerMenu);
  }

  private buildPublishAnswerMenu(): void {
    this.publishAnswerMenu = new Menu<BotContext>('publish-answer-menu')
      .text('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª', async (ctx) => {
        ctx.menu.nav('publish-channels-menu');
      })
      .row();

    const channelListMenu = new Menu<BotContext>('publish-channels-menu').dynamic(async (ctx) => {
      const channels = await this.channelsEntity.find({
        where: {
          mainOwner: ctx.callbackQuery.from.id,
          type: 'channel',
        },
      });
      const range = new MenuRange<BotContext>();
      for (const channel of channels) {
        const channelInfo = await ctx.api.getChat(channel.id);
        range
          .text(channelInfo['title'], async (ctx) => {
            const bot = await this.bot.api.getMe();
            const link = `https://t.me/${bot.username}?start=${ctx.callbackQuery.from.id}`;
            const menu = new InlineKeyboard().url('–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', link);
            await ctx.api.copyMessage(
              channel.id,
              ctx.callbackQuery.from.id,
              ctx.callbackQuery.message.message_id,
              {reply_markup: menu}
            );
            await ctx.deleteMessage();
          })
          .row();
      }
      if (!channels.length) {
        range.text('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç', (ctx) => ctx.deleteMessage());
      }
      return range;
    });
    this.publishAnswerMenu.register(channelListMenu);

    this.bot.use(this.publishAnswerMenu);
  }

  private buildMainMenu(): void {
    const mainMenu = new Menu<BotContext>('menu_main')
      .text('–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', (ctx) => this.replyHowToMessage(ctx))
      .row()
      .text('–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞', (ctx) => ctx.conversation.enter('createAskBtnCv'));

    this.bot.use(mainMenu);

    this.bot.command(['menu'], async (ctx) => {
      await ctx.reply('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', {reply_markup: mainMenu});
    });

    this.bot.command(['spam'], async (ctx) => {
      if (!ctx.config.isOwner) {
        return;
      }
      await ctx.conversation.enter('createMessageSendCv');
    });
  }

  private async replyHowToMessage(ctx: BotContext): Promise<void> {
    const bot = await this.bot.api.getMe();
    const text =
      `üëâ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n\n` +
      '–í–∞—Ä–∏–∞–Ω—Ç 1.\n\n–ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n' +
      '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª"\n' +
      '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞\n' +
      '–í—ã–¥–∞–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n' +
      '–í–∞—Ä–∏–∞–Ω—Ç 2.\n' +
      '–ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞\n' +
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã -> –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n' +
      `–ù–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ @${bot.username}\n` +
      `–í—ã–¥–∞–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n` +
      `–ü—Ä–∏–∑–æ–≤–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞ @${bot.username} - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n` +
      '–ù–∞–∂–º–∏ –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –±–æ—Ç —Ä–∞–∑–º–µ—Å—Ç–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–±–æ—Ä–æ–º –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n' +
      `üëâ –°–æ–∑–¥–∞–π –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n` +
      '–ù–∞–∂–º–∏ –º–µ–Ω—é /menu –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç "–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"' +
      '\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∫–Ω–æ–ø–∫—É, —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—É–¥–∞ –Ω—É–∂–Ω–æ';
    await ctx.reply(text);
  }

  private async answerInlineQuery(ctx: BotContext): Promise<InlineQueryResultArticle> {
    const bot = await this.bot.api.getMe();
    const link = `https://t.me/${bot.username}?start=${ctx.inlineQuery.from.id}`;
    const menu = new InlineKeyboard().url('–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', link);

    return {
      id: 'anonymous_query',
      type: 'article',
      title: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å',
      reply_markup: menu,
      description: ctx.inlineQuery.query,
      input_message_content: {
        message_text: ctx.inlineQuery.query || '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ',
      },
    };
  }

  private async onInlineQueryMessage() {
    this.bot.on(['inline_query'], async (ctx) => {
      try {
        const queryResult: InlineQueryResultArticle[] = [await this.answerInlineQuery(ctx)];
        await ctx.answerInlineQuery(queryResult);
      } catch (e) {
        Logger.error(e.message, e);
      }
    });
  }

  private onStartHandler() {
    this.bot.command(['start'], async (ctx) => {
      const [, /**/ userId] = ctx.message.text.split(' ');
      ctx.session.sendMessageToId = +userId;
      if (!userId) {
        const text =
          '–ü—Ä–∏–≤–µ—Ç, —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥–¥–µ —É–≥–æ–¥–Ω–æ\n\n' +
          '- –ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n/how_to\n\n' +
          '- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n/menu\n\n' +
          '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @semirov';
        await ctx.reply(text);
      } else {
        await ctx.conversation.enter('askCV');
      }

      await this.userService.updateUserLastActivity(ctx);
    });
  }

  private async askQuestionConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ–Ω –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ. –ö–æ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç\n' +
      '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏ /cancel'
    );

    let replyCtx: BotContext = null;
    while (!replyCtx?.message?.text) {
      replyCtx = await conversation.wait();
      if (replyCtx?.message?.text === '/cancel') {
        await ctx.reply(
          '–û–∫–µ–π, –≤–æ–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å /menu —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞'
        );
        replyCtx = null;
        return;
      }
      if (replyCtx?.message?.text?.includes('/start')) {
        await ctx.reply(
          '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏ /cancel'
        );
        replyCtx = null;
      } else if (!replyCtx?.message?.text) {
        await ctx.reply(
          '–í–æ–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏ /cancel'
        );
        replyCtx = null;
      }
    }

    await ctx.reply('–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ!');

    await conversation.external(async () => {
      await ctx.api.sendMessage(ctx.session.sendMessageToId, `–ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`);
      const messageInUser = await ctx.api.copyMessage(
        ctx.session.sendMessageToId,
        ctx.message.from.id,
        replyCtx.message.message_id,
        {reply_markup: this.answerMenu}
      );
      await this.messagesEntity.insert({
        anonymousOriginalMessageId: replyCtx.message.message_id,
        anonymousMessageForUerId: ctx.session.sendMessageToId,
        anonymousMessageFromUserId: replyCtx.message.from.id,
        anonymousMessageCopyId: messageInUser.message_id,
        questionText: replyCtx.message.text,
      });
    });
  }

  private async answerQuestionConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–º—É –∫—Ç–æ –µ–≥–æ –∑–∞–¥–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å, –Ω–∞–∂–º–∏\n/cancel'
    );

    let replyCtx: BotContext = null;
    while (!replyCtx?.message?.text) {
      replyCtx = await conversation.wait();
      if (replyCtx?.message?.text === '/cancel') {
        await ctx.reply('–û–∫–µ–π, –Ω–µ –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å');
        replyCtx = null;
        return;
      }
      if (replyCtx?.message?.text?.includes('/start')) {
        await ctx.reply(
          '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å, –Ω–∞–∂–º–∏\n/cancel'
        );
        replyCtx = null;
      } else if (!replyCtx?.message?.text) {
        await ctx.reply(
          '–û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏\n/cancel'
        );
        replyCtx = null;
      }
    }

    await ctx.reply('–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω!');

    await conversation.external(async () => {
      const message = await this.messagesEntity.findOne({
        where: {
          anonymousMessageCopyId: ctx.callbackQuery.message.message_id,
        },
      });
      await ctx.api.editMessageReplyMarkup(
        ctx.callbackQuery.from.id,
        ctx.callbackQuery.message.message_id,
        {reply_markup: null}
      );

      await ctx.api.sendMessage(message.anonymousMessageFromUserId, '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:');
      await ctx.api.forwardMessage(
        message.anonymousMessageFromUserId,
        message.anonymousMessageFromUserId,
        message.anonymousOriginalMessageId
      );
      await ctx.api.copyMessage(
        message.anonymousMessageFromUserId,
        replyCtx.message.from.id,
        replyCtx.message.message_id
      );

      await this.messagesEntity.update(
        {
          anonymousOriginalMessageId: message.anonymousOriginalMessageId,
        },
        {answerMessageId: replyCtx.message.message_id, answerText: replyCtx.message.text}
      );

      const channelCount = await this.channelsEntity.count({
        where: {
          mainOwner: ctx.callbackQuery.from.id,
          type: 'channel',
        },
      });

      const bot = await this.bot.api.getMe();
      const link = `https://t.me/${bot.username}?start=${ctx.callbackQuery.from.id}`;
      const menu = new InlineKeyboard().url('–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', link);

      let text = `<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n`;
      text += message.questionText;
      text += '\n\n';
      text += '<b>–û—Ç–≤–µ—Ç:</b>\n';
      text += replyCtx.message.text;
      await ctx.reply(text, {
        parse_mode: 'HTML',
        reply_markup: channelCount ? this.publishAnswerMenu : menu,
      });
    });
  }

  private async createAnonymousPostConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n–Ø —Å–æ–∑–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, ' +
      '—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å–æ–≤–∞–Ω —Ç–µ–±–µ. ' +
      '–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É–¥–∞ –∑–∞—Ö–æ—á–µ—à—å.' +
      '\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–∂–º–∏ /default' +
      '\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–∂–º–∏ /cancel'
    );

    const bot = await this.bot.api.getMe();
    const link = `https://t.me/${bot.username}?start=${ctx.callbackQuery.from.id}`;
    const menu = new InlineKeyboard().url('–ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', link);

    let replyCtx: BotContext = null;
    while (!replyCtx?.message?.text) {
      replyCtx = await conversation.wait();
      if (replyCtx?.message?.text === '/cancel') {
        await ctx.reply('–û–∫–µ–π, –Ω–µ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å');
        replyCtx = null;
        return;
      }
      if (replyCtx?.message?.text?.includes('/start')) {
        await ctx.reply(
          '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∑–∞–∫–æ–Ω—á–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏\n/cancel'
        );
        replyCtx = null;
      } else if (replyCtx?.message?.text?.includes('/default')) {
        await ctx.reply('–ó–∞–¥–∞–π –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å', {reply_markup: menu});
        return;
      } else if (!replyCtx?.message?.text) {
        await ctx.reply(
          '–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏\n/cancel'
        );
        replyCtx = null;
      }
    }

    await ctx.reply(replyCtx.message.text, {reply_markup: menu});
  }

  private async createMassMessageConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply(
      '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞' + '\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–∂–º–∏ /cancel'
    );

    let replyCtx: BotContext = null;
    while (!replyCtx?.message?.text) {
      replyCtx = await conversation.wait();
      if (replyCtx?.message?.text === '/cancel') {
        await ctx.reply('–û–∫–µ–π, –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ —Å–ª–∞—Ç—å');
        replyCtx = null;
        return;
      }
      if (!replyCtx?.message?.text) {
        await ctx.reply(
          '–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏\n/cancel'
        );
        replyCtx = null;
      }
    }

    await conversation.external(async () => {
      const users = await this.userService.getUsers();

      await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ' + users.length);

      for (const user of users) {
        try {
          await ctx.api.copyMessage(user.id, replyCtx.message.from.id, replyCtx.message.message_id);
        } catch (e) {
          await this.userService.disableSendMessageForUser(user.id);
        }
      }
    });
  }
}
