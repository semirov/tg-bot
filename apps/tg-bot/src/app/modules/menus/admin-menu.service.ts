import {Inject, Injectable, Logger, OnModuleInit} from '@nestjs/common';
import {BOT} from '../bot/providers/bot.provider';
import {Bot} from 'grammy';
import {BotContext} from '../bot/interfaces/bot-context.interface';
import {Menu, MenuRange} from '@grammyjs/menu';
import {AdminMenusEnum} from './constants/bot-menus.enum';
import {UserService} from '../bot/services/user.service';
import {BaseConfigService} from '../config/base-config.service';
import {Conversation, createConversation} from '@grammyjs/conversations';
import {ConversationsEnum} from '../conversations/constants/conversations.enum';
import {UserEntity} from '../bot/entities/user.entity';
import {add, getUnixTime} from 'date-fns';
import {ClientBaseService} from '../client/services/client-base.service';

@Injectable()
export class AdminMenuService implements OnModuleInit {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private userService: UserService,
    private baseConfigService: BaseConfigService,
    private clientBaseService: ClientBaseService
  ) {
  }

  onModuleInit() {
    this.bot.errorBoundary(
      (err) => Logger.log(err),
      createConversation(
        this.addModeratorConversation.bind(this),
        ConversationsEnum.ADD_MODERATOR_CONVERSATION
      )
    );
  }

  public buildStartAdminMenu(
    userStartMenu: Menu<BotContext>,
    moderatorStartMenu: Menu<BotContext>
  ): Menu<BotContext> {
    const menu = new Menu<BotContext>(AdminMenusEnum.ADMIN_START_MENU)
      .text('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', (ctx) => ctx.menu.nav('moderators-list'))
      .row()
      .text('–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', async (ctx) =>
        ctx.conversation.enter(ConversationsEnum.ADD_MODERATOR_CONVERSATION)
      )
      .row()
      .text(
        async () => {
          const status = await this.clientBaseService.lastObserverStatus();
          return status ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—é' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—é';
        },
        async (ctx) => {
          await this.clientBaseService.toggleChannelObserver();
          ctx.menu.update();
        }
      )
      .row()
      .text('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      .row()
      .text('–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', (ctx) =>
        ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', {
          reply_markup: moderatorStartMenu,
        })
      )
      .row()
      .text('–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', (ctx) =>
        ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', {
          reply_markup: userStartMenu,
        })
      )
      .row();

    const moderatorsListMenu = new Menu<BotContext>('moderators-list').dynamic(async () => {
      const moderators = await this.userService.getModerators();
      const range = new MenuRange<BotContext>();
      for (const moderator of moderators) {
        range
          .text('@' + moderator.username, (ctx) => {
            ctx.session.lastChangedModeratorId = moderator.id;
            ctx.menu.nav('moderator-manage');
          })
          .row();
      }
      if (moderators.length) {
        range.back('–ù–∞–∑–∞–¥');
      } else {
        range.text('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç', (ctx) => ctx.menu.nav(AdminMenusEnum.ADMIN_START_MENU));
      }
      return range;
    });

    const moderatorSettingMenu = new Menu<BotContext>('moderator-manage')
      .text('–ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', async (ctx) => {
        await this.removeModerator(ctx);
        ctx.session.lastChangedModeratorId = undefined;
        ctx.menu.nav('moderators-list');
      })
      .row()
      .text(
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          return user.allowPublishToChannel ? '–ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' : '–ù–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
        },
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          await this.userService.repository.update(
            {id: ctx.session.lastChangedModeratorId},
            {allowPublishToChannel: !user.allowPublishToChannel}
          );
          ctx.menu.update();
        }
      )
      .row()
      .text(
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          return user.allowDeleteRejectedPost
            ? '–ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ'
            : '–ù–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ';
        },
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          await this.userService.repository.update(
            {id: ctx.session.lastChangedModeratorId},
            {allowDeleteRejectedPost: !user.allowDeleteRejectedPost}
          );
          ctx.menu.update();
        }
      )
      .row()
      .text(
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          return user.allowRestoreDiscardedPost
            ? '–ú–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ'
            : '–ù–µ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ';
        },
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          await this.userService.repository.update(
            {id: ctx.session.lastChangedModeratorId},
            {allowRestoreDiscardedPost: !user.allowRestoreDiscardedPost}
          );
          ctx.menu.update();
        }
      )
      .row()
      .text(
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          return user.allowSetStrike ? '–ú–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–π–∫–∏' : '–ù–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–π–∫–∏';
        },
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          await this.userService.repository.update(
            {id: ctx.session.lastChangedModeratorId},
            {allowSetStrike: !user.allowSetStrike}
          );
          ctx.menu.update();
        }
      )
      .row()
      .text(
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          return user.allowMakeBan ? '–ú–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å' : '–ù–µ –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å'
        },
        async (ctx) => {
          const user = await this.userService.findById(ctx.session.lastChangedModeratorId);
          await this.userService.repository.update(
            {id: ctx.session.lastChangedModeratorId},
            {allowMakeBan: !user.allowMakeBan}
          );
          ctx.menu.update();
        }
      )
      .row()
      .text('–ù–∞–∑–∞–¥', (ctx) => ctx.menu.nav('moderators-list'));

    menu.register(moderatorsListMenu);
    menu.register(moderatorSettingMenu);

    return menu;
  }

  public async addModeratorConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    let user: UserEntity = null;

    await ctx.reply('–ü—Ä–∏—à–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã');
    while (!user) {
      const messageCtx = await conversation.wait();

      if (!messageCtx.message.text) {
        continue;
      }

      user = await conversation.external(() =>
        this.userService.repository.findOne({where: {username: messageCtx.message?.text}})
      );

      let text = '–ù–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      if (user?.isModerator) {
        text = '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä';
        user = null;
      }

      if (user?.isBanned) {
        text = '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        user = null;
      }

      if (!user) {
        await ctx.reply(text + '\n–µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –Ω–∞–∂–º–∏ /cancel');
      }
      if (ctx.message?.text === '/cancel') {
        await ctx.reply('–ó–∞–∫–æ–Ω—á–∏–ª–∏ –∏—Å–∫–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
        return;
      }
    }

    const link = await ctx.api.createChatInviteLink(this.baseConfigService.userRequestMemeChannel, {
      member_limit: 1,
      name: `moderator: ${user.username}`,
      expire_date: getUnixTime(add(new Date(), {weeks: 1})),
    });

    await this.userService.repository.update({id: user.id}, {isModerator: true});

    const channelInfo = await ctx.api.getChat(this.baseConfigService.memeChanelId);

    const text =
      '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâüéâüéâ\n–¢–µ–±—è –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ ' +
      channelInfo['title'] +
      `\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –∫–∞–Ω–∞–ª—É –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      link.invite_link +
      '\n\n–≠—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è üòâ\n' +
      '–ù–µ –¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∏ —Å –∫–µ–º';

    await ctx.api.sendMessage(user.id, text);
  }

  private async removeModerator(ctx: BotContext) {
    const moderatorId = ctx.session.lastChangedModeratorId;

    await this.userService.repository.update({id: moderatorId}, {isModerator: false});
    await ctx.api.banChatMember(this.baseConfigService.userRequestMemeChannel, moderatorId);
    await ctx.api.sendMessage(
      moderatorId,
      '–ñ–∞–ª—å, –Ω–æ —Ç—ã –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤, –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ —Ç—ã –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –º–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–µ–º—ã'
    );
  }
}
