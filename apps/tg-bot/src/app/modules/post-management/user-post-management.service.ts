import {Conversation, createConversation} from '@grammyjs/conversations';
import {BotContext} from '../bot/interfaces/bot-context.interface';
import {Inject, Logger, OnModuleInit} from '@nestjs/common';
import {BOT} from '../bot/providers/bot.provider';
import {Bot, InlineKeyboard} from 'grammy';
import {ConversationsEnum} from './constants/conversations.enum';
import {Menu} from '@grammyjs/menu';
import {BaseConfigService} from '../config/base-config.service';
import {UserService} from '../bot/services/user.service';
import {UserPermissionEnum} from '../bot/constants/user-permission.enum';
import {PublicationModesEnum} from './constants/publication-modes.enum';
import {PostModerationMenusEnum} from './constants/post-moderation-menus.enum';
import {add, format, getUnixTime} from 'date-fns';
import {UserRequestService} from '../bot/services/user-request.service';
import {
  PostSchedulerService,
  ScheduledPostContextInterface,
} from '../bot/services/post-scheduler.service';
import {SettingsService} from '../bot/services/settings.service';
import {CringeManagementService} from '../bot/services/cringe-management.service';

export class UserPostManagementService implements OnModuleInit {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private baseConfigService: BaseConfigService,
    private userService: UserService,
    private userRequestService: UserRequestService,
    private postSchedulerService: PostSchedulerService,
    private settingsService: SettingsService,
    private cringeManagementService: CringeManagementService
  ) {
  }

  /**
   * –ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
   */
  private moderatedPostMenu: Menu<BotContext>;

  public readonly MEME_RULES =
    '<b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b>\n' +
    '- –°–º–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n' +
    '- –°–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ\n\n' +
    '<b>–ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–π –º–µ–º:</b>\n' +
    '- –ü–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏–ª–∏ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n' +
    '- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω—É –º–µ–º –ø–æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ —Å–º–µ—à–Ω—ã–º\n' +
    '- –ü—É–±–ª–∏–∫—É–µ–º—ã–µ –º–µ–º—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ—Ä–æ–º\n' +
    '- –ú–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ —Å—Ä–∞–∑—É\n';

  public readonly cancelMessage =
    '–ñ–∞–ª—å —á—Ç–æ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–Ω–æ–≤–∞!\n–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–∂–º–∏ /menu';

  public onModuleInit(): void {
    this.buildModeratedPostMenu();
    this.bot.errorBoundary(
      (err) => Logger.log(err),
      createConversation(this.conversation.bind(this), ConversationsEnum.SEND_MEME_CONVERSATION)
    );
  }

  public async conversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    const menu = new Menu<BotContext>('inner-meme-menu')
      .text(
        (ctx) =>
          ctx.session.anonymousPublishing ? 'üôàÔ∏è –ü—É–±–ª–∏–∫—É—é—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ' : 'üëÅÔ∏è –ü—É–±–ª–∏–∫—É—é—Å—å –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ',
        (ctx) => {
          ctx.session.anonymousPublishing = !ctx.session.anonymousPublishing;
          ctx.menu.update();
        }
      )
      .row()
      .text('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞', (ctx) => ctx.reply(this.MEME_RULES, {parse_mode: 'HTML'}))
      .text('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª', async (ctx) => {
        await ctx.deleteMessage();
        await ctx.reply(this.cancelMessage);
        throw new Error('User exit from send meme conversation');
      })
      .row();

    await conversation.run(menu);

    const text =
      '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–º–µ—à–Ω–æ, —Ç–æ –µ–≥–æ –æ–ø—É–±–ª–∏–∫—É—é—Ç';

    await ctx.reply(text, {reply_markup: menu});
    while (!ctx.message?.photo) {
      ctx = await conversation.wait();

      if (ctx.message?.photo || ctx.message?.video) {
        await this.handleUserMemeRequest(ctx);
        return;
      }

      if (ctx.message?.text === '/cancel') {
        await ctx.reply(this.cancelMessage);
        return;
      }

      if (ctx.message) {
        await ctx.reply(
          '–ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ\n–µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –Ω–∞–∂–º–∏ /cancel'
        );
      }
    }
  }

  public async handleUserMemeRequest(ctx: BotContext): Promise<void> {
    const isLastRequestMoreThanMinuteAgo = await this.isLastRequestMoreThanMinuteAgo(ctx);

    if (!isLastRequestMoreThanMinuteAgo) {
      await ctx.reply('–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–µ–º—ã –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É');
      return;
    }

    const user = await this.userService.repository.findOne({
      where: {id: ctx.message.from.id},
    });
    const {first_name, last_name, username, is_bot, is_premium} = ctx.message.from;
    const text = [
      '–ü–æ—Å—Ç –æ—Ç',
      is_premium ? 'üëë' : null,
      is_bot ? 'ü§ñ' : null,
      first_name,
      last_name,
      username ? `@${username}` : null,
      '\n#–ø—Ä–µ–¥–ª–æ–∂–∫–∞'
    ].filter(v => !!v).join(' ');
    await this.bot.api.sendMessage(
      this.baseConfigService.userRequestMemeChannel,
      text, {disable_notification: true}
    );
    const message = await ctx.api.copyMessage(
      this.baseConfigService.userRequestMemeChannel,
      ctx.message.chat.id,
      ctx.message.message_id,
      {reply_markup: this.moderatedPostMenu, disable_notification: true}
    );

    await this.userRequestService.repository.insert({
      user: user,
      isAnonymousPublishing: ctx.session.anonymousPublishing,
      originalMessageId: ctx.message.message_id,
      userRequestChannelMessageId: message.message_id,
    });
    await ctx.reply('–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ üòé');
    await this.userService.updateUserLastActivity(ctx);
  }

  private buildModeratedPostMenu() {
    const menu = new Menu<BotContext>(PostModerationMenusEnum.MODERATION, {autoAnswer: false})
      .text('üëç –û–¥–æ–±—Ä–∏—Ç—å', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          await this.onModeratorApprovalActions(ctx);
          ctx.menu.nav(PostModerationMenusEnum.APPROVAL);
        }
      })
      .text('üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          await this.onModeratorRejectActions(ctx);
          ctx.menu.nav(PostModerationMenusEnum.REJECT);
        }
      })
      .row();

    const approvedSubmenu = new Menu<BotContext>(PostModerationMenusEnum.APPROVAL, {
      autoAnswer: false,
    })
      .text(
        async (ctx) => {
          const message = await this.userRequestService.repository.findOne({
            select: ['processedByModerator'],
            where: {userRequestChannelMessageId: ctx.callbackQuery.message.message_id},
            relations: {processedByModerator: true},
          });
          return `‚úÖ –û–¥–æ–±—Ä–µ–Ω (${message.processedByModerator.username})`;
        },
        async (ctx) => {
          if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_PUBLISH_TO_CHANNEL)) {
            ctx.menu.nav(PostModerationMenusEnum.PUBLICATION);
          }
        }
      )
      .row()
      .text(async (ctx) => {
        const statistic = await this.userRequestService.userPostDiscardStatistic(ctx);
        return `üëé ${statistic.total} (${statistic.week})`;
      })
      .text(async (ctx) => {
        const statistic = await this.userRequestService.userPostApprovedStatistic(ctx);
        return `üëç ${statistic.total} (${statistic.day})`;
      })
      .text(async (ctx) => {
        const lastPostInfo = await this.userRequestService.lastPublishedPostTimeAgo(ctx);
        return `üóì ${lastPostInfo}`;
      })
      .row();

    const publishSubmenu = new Menu<BotContext>(PostModerationMenusEnum.PUBLICATION, {
      autoAnswer: false,
    })
      .text('–ö—Ä–∏–Ω–∂', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NIGHT_CRINGE))
      .text('–°–µ–π—á–∞—Å', async (ctx) =>
        this.onPublishActions(ctx, PublicationModesEnum.NOW_SILENT)
      )
      .row()
      .text('–ù–æ—á—å—é', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_NIGHT))
      .text('–£—Ç—Ä–æ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_MORNING))
      .text('–î–Ω–µ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_MIDDAY))
      .text('–í–µ—á–µ—Ä–æ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_EVENING))
      .row()
      .text('–ù–∞–∑–∞–¥', (ctx) => ctx.menu.nav(PostModerationMenusEnum.APPROVAL));

    const rejectSubmenu = new Menu<BotContext>(PostModerationMenusEnum.REJECT, {
      autoAnswer: false,
    })
      .text(
        async (ctx) => {
          const message = await this.userRequestService.repository.findOne({
            select: ['processedByModerator'],
            where: {userRequestChannelMessageId: ctx.callbackQuery.message.message_id},
            relations: {processedByModerator: true},
          });
          return `üë® –û—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå (${message.processedByModerator.username})`;
        },
        async (ctx) => {
          if (
            this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_DELETE_REJECTED_POST)
          ) {
            await ctx.deleteMessage();
          }
        }
      )
      .row()
      .text('üîÅ', async (ctx) => {
        if (
          this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_RESTORE_DISCARDED_POST)
        ) {
          await this.onAdminApproveAfterReject(ctx);
          ctx.menu.nav(PostModerationMenusEnum.APPROVAL);
        }
      })
      .text(
        async (ctx) => {
          const stikesCount = await this.getUserStrikesCount(ctx);
          return `‚ùó ${stikesCount || 0}`;
        },
        async (ctx) => {
          if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_SET_STRIKE)) {
            ctx.menu.nav(PostModerationMenusEnum.STRIKE);
          }
        }
      )
      .text('üíÄ', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_MAKE_BAN)) {
          await this.onAdminApproveAfterReject(ctx);
          ctx.menu.nav(PostModerationMenusEnum.BAN);
        }
      })
      .row();

    const banConfirmation = new Menu<BotContext>(PostModerationMenusEnum.BAN, {autoAnswer: false})
      .text('–¢–æ—á–Ω–æ –≤ –±–∞–Ω?', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_MAKE_BAN)) {
          await this.banUser(ctx);
          await ctx.deleteMessage();
        }
        return;
      })
      .text('–ù–µ—Ç', async (ctx) => {
        ctx.menu.nav(PostModerationMenusEnum.REJECT);
      })
      .row();

    const strikeConfirmation = new Menu<BotContext>(PostModerationMenusEnum.STRIKE, {
      autoAnswer: false,
    })
      .text('–¢–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–π–∫?', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_SET_STRIKE)) {
          await this.makeUserStrike(ctx);
          ctx.menu.nav(PostModerationMenusEnum.REJECT);
        }
      })
      .text('–ù–µ—Ç', async (ctx) => {
        ctx.menu.nav(PostModerationMenusEnum.REJECT);
      })
      .row();

    menu.register(publishSubmenu);
    menu.register(banConfirmation);
    menu.register(strikeConfirmation);
    menu.register(approvedSubmenu);
    menu.register(rejectSubmenu);

    this.moderatedPostMenu = menu;
    this.bot.use(this.moderatedPostMenu);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–∏—Ç—å
   */
  private async onModeratorApprovalActions(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });
    await this.userRequestService.repository.update(
      {id: message.id},
      {
        isApproved: true,
        processedByModerator: {id: ctx.callbackQuery.from.id},
        moderatedAt: new Date(),
      }
    );
    return;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞
   */
  private async onModeratorRejectActions(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      relations: {user: true},
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });

    await this.userRequestService.repository.update(
      {id: message.id},
      {
        isApproved: false,
        processedByModerator: {id: ctx.callbackQuery.from.id},
        moderatedAt: new Date(),
      }
    );
    await this.bot.api
      .forwardMessage(message.user.id, message.user.id, message.originalMessageId)
      .catch();
    await this.bot.api.sendMessage(
      message.user.id,
      '–ñ–∞–ª—å, –Ω–æ —Ç–≤–æ–π –º–µ–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üòî\n\n' +
      '–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–π –º–µ–º üòâ'
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ—Å—Ç–∞
   */
  public async onPublishActions(ctx: BotContext, mode: PublicationModesEnum) {
    if (!this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_PUBLISH_TO_CHANNEL)) {
      return;
    }

    const publishContext: ScheduledPostContextInterface = {
      mode,
      requestChannelMessageId: ctx.callbackQuery.message.message_id,
      processedByModerator: ctx.callbackQuery.from.id,
      caption: ctx.callbackQuery?.message?.caption,
      isUserPost: true,
    };

    switch (mode) {
      case PublicationModesEnum.NOW_SILENT:
        return this.onPublishNow(publishContext);
      case PublicationModesEnum.NEXT_MORNING:
      case PublicationModesEnum.NEXT_MIDDAY:
      case PublicationModesEnum.NEXT_EVENING:
      case PublicationModesEnum.NEXT_NIGHT:
        return this.publishScheduled(publishContext);
      case PublicationModesEnum.NIGHT_CRINGE:
        return this.publishNightCringeScheduled(publishContext);
    }
  }

  public async onPublishNow(publishContext: ScheduledPostContextInterface) {
    const message = await this.userRequestService.repository.findOne({
      relations: {user: true},
      where: {
        userRequestChannelMessageId: publishContext.requestChannelMessageId,
      },
    });

    let caption = '';
    if (publishContext.caption) {
      caption += `${publishContext.caption}\n\n`;
    }

    if (!message.isAnonymousPublishing) {
      const chatInfo = await this.bot.api.getChat(message.user.id);
      if (chatInfo['username']) {
        caption += `#–ø—Ä–µ–¥–ª–æ–∂–∫–∞ @${chatInfo['username']}\n`;
      }
    } else {
      caption += `#–ø—Ä–µ–¥–ª–æ–∂–∫–∞\n`;
    }

    if (publishContext.mode === PublicationModesEnum.NIGHT_CRINGE) {
      const channelHtmlLink = await this.settingsService.cringeChannelHtmlLink();
      caption += channelHtmlLink;
    } else {
      const channelHtmlLink = await this.settingsService.channelHtmlLinkIfPrivate();
      caption += channelHtmlLink;
    }
    const channelInfo = await this.bot.api.getChat(this.baseConfigService.memeChanelId);

    const publishedMessage = await this.bot.api.copyMessage(
      this.baseConfigService.memeChanelId,
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      {
        caption: caption,
        parse_mode: 'HTML',
        disable_notification: publishContext.caption === PublicationModesEnum.NOW_SILENT,
      }
    );

    await this.userRequestService.repository.update(
      {id: message.id},
      {
        isPublished: true,
        publishedAt: new Date(),
        publishedBy: publishContext.processedByModerator,
        publishedMessageId: publishedMessage.message_id,
      }
    );

    await this.bot.api.forwardMessage(message.user.id, channelInfo.id, publishedMessage.message_id);

    let userFeedbackMessage = '–¢–≤–æ–π –º–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üëç\n';
    if (publishContext.mode !== PublicationModesEnum.NIGHT_CRINGE) {
      userFeedbackMessage += '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–º–µ—à–Ω—ã–º–∏ –º–µ–º–∞–º–∏, –ø—Ä–∏—Å—ã–ª–∞–π –µ—â–µ! ‚ù§Ô∏è\n';
    } else {
      const cringeChannelLink = await this.settingsService.cringeChannelHtmlLink();
      userFeedbackMessage += `–£—Ç—Ä–æ–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª ${cringeChannelLink}`;
    }

    await this.bot.api.sendMessage(message.user.id, userFeedbackMessage, {parse_mode: 'HTML'});

    const user = await this.userService.repository.findOne({
      where: {id: publishContext.processedByModerator},
    });

    const url = await this.settingsService.channelLinkUrl();
    const inlineKeyboard = new InlineKeyboard().url(`üë® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (${user.username})`, url).row();

    await this.bot.api.editMessageReplyMarkup(
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      {reply_markup: inlineKeyboard}
    );

    if (publishContext.mode == PublicationModesEnum.NIGHT_CRINGE) {
      await this.cringeManagementService.repository.update(
        {requestChannelMessageId: publishContext.requestChannelMessageId},
        {memeChannelMessageId: publishedMessage.message_id}
      );
    }
  }

  private async publishNightCringeScheduled(
    publicContext: ScheduledPostContextInterface
  ): Promise<void> {
    await this.cringeManagementService.repository.insert({
      requestChannelMessageId: publicContext.requestChannelMessageId,
      isUserPost: publicContext.isUserPost,
    });
    await this.publishScheduled(publicContext);
  }

  private async publishScheduled(publishContext: ScheduledPostContextInterface): Promise<void> {
    const publishDate = await this.postSchedulerService.addPostToSchedule(publishContext);

    const dateFormatted = format(
      PostSchedulerService.formatToMsk(publishDate),
      'dd.LL.yy –≤ ~HH:mm'
    );

    const user = await this.userService.repository.findOne({
      where: {id: publishContext.processedByModerator},
    });

    const inlineKeyboard = new InlineKeyboard()
      .text(`‚è∞ ${dateFormatted} (${user.username})`)
      .row();

    await this.bot.api.editMessageReplyMarkup(
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      {reply_markup: inlineKeyboard}
    );

    const message = await this.userRequestService.repository.findOne({
      relations: {user: true},
      where: {
        userRequestChannelMessageId: publishContext.requestChannelMessageId,
      },
    });

    await this.bot.api.forwardMessage(message.user.id, message.user.id, message.originalMessageId);

    let userFeedbackMessage = `–¢–≤–æ–π –º–µ–º –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ${dateFormatted} ‚è±\n\n`;
    if (publishContext.mode === PublicationModesEnum.NIGHT_CRINGE) {
      const cringeChannelLink = await this.settingsService.cringeChannelHtmlLink();
      userFeedbackMessage += `–ü–æ—Å—Ç –ø–æ–ø–∞–ª –≤ –æ—Å–æ–±—É—é —Ä—É–±—Ä–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é, –∞ —É—Ç—Ä–æ–º –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: ${cringeChannelLink}\n`;
    }
    userFeedbackMessage += '–ü—Ä–∏—Å—ã–ª–∞–π –µ—â–µ üòâÔ∏è';

    await this.bot.api.sendMessage(message.user.id, userFeedbackMessage, {parse_mode: 'HTML'});

    return Promise.resolve();
  }

  private async onAdminApproveAfterReject(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      relations: {user: true},
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });

    await this.userRequestService.repository.update(
      {id: message.id},
      {
        restoredBy: ctx.config.user.id,
        isApproved: true,
      }
    );

    await this.bot.api.forwardMessage(message.user.id, message.user.id, message.originalMessageId);
    await this.bot.api.sendMessage(
      message.user.id,
      '–ú—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏! ü§Ø\n\n' +
      '–¢–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç, –º—ã –¥–æ–ª–≥–æ –¥—É–º–∞–ª–∏, —Å–º–µ—è–ª–∏ –º–µ–º —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –µ–≥–æ –≤—Å–µ–º –∫–æ–º—É –º–æ–≥–ª–∏, ' +
      '–≤ –∏—Ç–æ–≥–µ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! üéâ\n' +
      '–ü—Ä–æ—Å—Ç–∏ —á—Ç–æ —Ç–∞–∫ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å —Ç–æ–±–æ–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º—ã –±—É–¥–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. ü•∫\n' +
      'P.S. –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–µ–º –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üòâ'
    );
  }

  public async banUser(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: {userRequestChannelMessageId: ctx.callbackQuery.message.message_id},
      relations: {user: true},
    });

    await this.userService.repository.update(
      {id: message.user.id},
      {
        isBanned: true,
        bannedBy: ctx.callbackQuery.from.id,
        banUntilTo: add(new Date(), {months: 1}),
      }
    );

    await this.bot.api.sendMessage(
      message.user.id,
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —Ç.–∫. ' +
      '—Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, ' +
      '–Ω–∞–º –∂–∞–ª—å —á—Ç–æ –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ª—å —Å–µ—Ä—å–µ–∑–Ω—É—é –º–µ—Ä—É, ' +
      '–Ω–æ —É –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞.\n\n' +
      '–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
    );
  }

  private async makeUserStrike(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: {userRequestChannelMessageId: ctx.callbackQuery.message.message_id},
      relations: {user: true},
    });

    await this.userService.repository.update(
      {id: message.user.id},
      {
        strikes: (message.user.strikes || 0) + 1,
      }
    );
  }

  private async getUserStrikesCount(ctx: BotContext): Promise<number> {
    const message = await this.userRequestService.repository.findOne({
      where: {userRequestChannelMessageId: ctx.callbackQuery.message.message_id},
      relations: {user: true},
    });

    return message.user.strikes;
  }

  private async isLastRequestMoreThanMinuteAgo(ctx: BotContext): Promise<boolean> {
    if (
      !ctx.session?.lastPublishedAt ||
      ctx.session?.lastPublishedAt + 60 < getUnixTime(new Date())
    ) {
      ctx.session.lastPublishedAt = getUnixTime(new Date());
      return true;
    }
    return false;
  }
}
