import {Inject, Injectable, Logger, OnModuleInit} from '@nestjs/common';
import {Conversation, createConversation} from '@grammyjs/conversations';
import {ConversationsEnum} from './constants/conversations.enum';
import {BOT} from '../bot/providers/bot.provider';
import {Bot, InlineKeyboard} from 'grammy';
import {BotContext} from '../bot/interfaces/bot-context.interface';
import {BaseConfigService} from '../config/base-config.service';
import {UserService} from '../bot/services/user.service';
import {UserPostManagementService} from './user-post-management.service';
import {add} from 'date-fns';

@Injectable()
export class AskAdminService implements OnModuleInit {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private baseConfigService: BaseConfigService,
    private userService: UserService,
    private userPostManagementService: UserPostManagementService
  ) {
  }

  onModuleInit() {
    this.bot.errorBoundary(
      (err) => Logger.log(err),
      createConversation(
        this.userAdminConversation.bind(this),
        ConversationsEnum.USER_ADMIN_CONVERSATION
      )
    );
    this.bot.errorBoundary(
      (err) => Logger.log(err),
      createConversation(
        this.adminUserConversation.bind(this),
        ConversationsEnum.ADMIN_USER_CONVERSATION
      )
    );

    this.onAdminUserQuery();
  }

  public async userAdminConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply('–ù–∞–ø–∏—à–∏ —Ç–æ —á—Ç–æ —Ö–æ—á–µ—à—å –∏ —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–∂–º–∏ /cancel');

    const replyCtx = await conversation.wait();

    if (replyCtx?.message?.text === '/cancel') {
      await ctx.reply('–û–∫–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—é - –Ω–∞–∂–º–∏ /menu –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–µ–º');
      return;
    }
    await ctx.reply('–Ø –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞');

    const menu = new InlineKeyboard()
      .text(
        '–û—Ç–≤–µ—Ç–∏—Ç—å',
        `admin_user_dialog_start$${replyCtx.message.from.id}$${replyCtx.message.message_id}`
      )
      .row()
      .text(
        'üíÄ –ë–∞–Ω',
        `admin_user_dialog_ban_user$${replyCtx.message.from.id}$${replyCtx.message.message_id}`
      )
      .row();

    await replyCtx.forwardMessage(this.baseConfigService.ownerId);
    await replyCtx.api.sendMessage(
      this.baseConfigService.ownerId,
      `–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${replyCtx.message.from.username}`,
      {reply_markup: menu}
    );
  }

  public async adminUserConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    await ctx.reply('–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

    const replyCtx = await conversation.wait();

    await ctx.api.copyMessage(
      ctx.session.adminUserConversationUserId,
      replyCtx.message.chat.id,
      replyCtx.message.message_id,
      {reply_to_message_id: ctx.session.adminUserConversationMessageId}
    );
    ctx.session.adminUserConversationMessageId = undefined;
    ctx.session.adminUserConversationUserId = undefined;
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    await ctx.deleteMessage();
  }

  private onAdminUserQuery(): void {
    this.bot.callbackQuery(/admin_user_dialog_start/, async (ctx) => {
      const [cmd, userId, messageId] = ctx.callbackQuery.data.split('$');

      ctx.session.adminUserConversationUserId = +userId;
      ctx.session.adminUserConversationMessageId = +messageId;

      await ctx.conversation.enter(ConversationsEnum.ADMIN_USER_CONVERSATION);
    });

    this.bot.callbackQuery(/admin_user_dialog_ban_user/, async (ctx) => {
      const [cmd, userId, messageId] = ctx.callbackQuery.data.split('$');

      await this.userService.repository.update(
        {id: +userId},
        {isBanned: true, bannedBy: ctx.callbackQuery.from.id}
      );

      await ctx.api.sendMessage(
        +userId,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —Ç.–∫. ' +
        '—Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n' +
        '–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
        {reply_to_message_id: +messageId}
      );
    });
  }
}
