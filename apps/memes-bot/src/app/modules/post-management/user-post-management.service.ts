import { Conversation, createConversation } from '@grammyjs/conversations';
import { BotContext } from '../bot/interfaces/bot-context.interface';
import { Inject, Logger, OnModuleInit } from '@nestjs/common';
import { BOT } from '../bot/providers/bot.provider';
import { Bot, Composer, InlineKeyboard } from 'grammy';
import { ConversationsEnum } from './constants/conversations.enum';
import { Menu } from '@grammyjs/menu';
import { BaseConfigService } from '../config/base-config.service';
import { UserService } from '../bot/services/user.service';
import { UserPermissionEnum } from '../bot/constants/user-permission.enum';
import { PublicationModesEnum } from './constants/publication-modes.enum';
import { PostModerationMenusEnum } from './constants/post-moderation-menus.enum';
import { add, format, formatDistance, getUnixTime } from 'date-fns';
import { UserRequestService } from '../bot/services/user-request.service';
import {
  PostSchedulerService,
  ScheduledPostContextInterface,
} from '../bot/services/post-scheduler.service';
import { SettingsService } from '../bot/services/settings.service';
import { CringeManagementService } from '../bot/services/cringe-management.service';
import { DeduplicationService } from '../bot/services/deduplication.service';
import * as console from 'node:console';
import { ru } from 'date-fns/locale';

export class UserPostManagementService implements OnModuleInit {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private baseConfigService: BaseConfigService,
    private userService: UserService,
    private userRequestService: UserRequestService,
    private postSchedulerService: PostSchedulerService,
    private settingsService: SettingsService,
    private cringeManagementService: CringeManagementService,
    private deduplicationService: DeduplicationService
  ) {}

  /**
   * –ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
   */
  private moderatedPostMenu: Menu<BotContext>;
  private replyToBotContext: Composer<BotContext>;

  public readonly MEME_RULES =
    '<b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b>\n' +
    '- –°–º–∏—â–Ω–æ–µ\n' +
    '- –í–∏–¥–µ–æ\n\n' +
    '<b>–ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–π –ø–æ—Å—Ç:</b>\n' +
    '- –ü–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏–ª–∏ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n' +
    '- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω—É –ø–æ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º\n' +
    '- –ü—É–±–ª–∏–∫—É–µ–º—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ—Ä–æ–º\n' +
    '- –ü–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ —Å—Ä–∞–∑—É\n';

  public readonly cancelMessage =
    '–ñ–∞–ª—å —á—Ç–æ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–Ω–æ–≤–∞!\n–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–∂–º–∏ /menu';

  private duplicateMenu: Menu<BotContext>;

  public onModuleInit(): void {
    this.buildModeratedPostMenu();
    this.buildDuplicateMenu();  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    this.prepareReplyToBotContext();
    this.handleAdminUserResponse();
    this.bot.errorBoundary(
      (err) => Logger.log(err),
      createConversation(this.conversation.bind(this), ConversationsEnum.SEND_MEME_CONVERSATION)
    );
  }

  public async conversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    const menu = new Menu<BotContext>('inner-meme-menu')
      .text(
        (ctx) =>
          ctx.session.anonymousPublishing ? 'üôàÔ∏è –ü—É–±–ª–∏–∫—É—é—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ' : 'üëÅÔ∏è –ü—É–±–ª–∏–∫—É—é—Å—å –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ',
        (ctx) => {
          ctx.session.anonymousPublishing = !ctx.session.anonymousPublishing;
          ctx.menu.update();
        }
      )
      .row()
      .text('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞', (ctx) => ctx.reply(this.MEME_RULES, { parse_mode: 'HTML' }))
      .text('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª', async (ctx) => {
        await ctx.deleteMessage();
        await ctx.reply(this.cancelMessage);
        throw new Error('User exit from send meme conversation');
      })
      .row();

    await conversation.run(menu);

    const text =
      '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ –µ–≥–æ –æ–ø—É–±–ª–∏–∫—É—é—Ç';

    await ctx.reply(text, { reply_markup: menu });
    // eslint-disable-next-line no-constant-condition
    while (true) {
      ctx = await conversation.wait();

      if (ctx.message?.photo || ctx.message?.video) {
        await this.handleUserMemeRequest(ctx);
        return;
      }

      if (ctx.message?.text && ctx.message.text !== '/cancel') {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await this.handleUserTextRequest(ctx);
        return;
      }

      if (ctx.message?.text === '/cancel') {
        await ctx.reply(this.cancelMessage);
        return;
      }

      if (ctx.message && !ctx.message.photo && !ctx.message.video && !ctx.message.text) {
        await ctx.reply(
          '–ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ\n–µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –Ω–∞–∂–º–∏ /cancel'
        );
      }
    }
  }

  public async handleUserTextRequest(ctx: BotContext): Promise<void> {
    try {
      await ctx.react('üëç');
    } catch (e) {
      await ctx.reply('–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º');
      Logger.warn(
        `Cannot set message reaction for user text message in bot ${ctx.me.id}`,
        UserPostManagementService.name
      );
    }

    const user = await this.userService.repository.findOne({
      where: { id: ctx.message.from.id },
    });

    const { first_name, last_name, username, is_bot, is_premium } = ctx.message.from;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    const userText = [
      'üìù –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç',
      is_premium ? 'üëë' : null,
      is_bot ? 'ü§ñ' : null,
      first_name,
      last_name,
      username ? `@${username}` : null,
    ]
      .filter((v) => !!v)
      .join(' ');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤
    await this.bot.api.sendMessage(this.baseConfigService.userRequestMemeChannel, userText, {
      disable_notification: true,
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (ctx.message.reply_to_message) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const replyMessage = await ctx.api.forwardMessage(
          this.baseConfigService.userRequestMemeChannel,
          ctx.message.chat.id,
          ctx.message.reply_to_message.message_id
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.bot.api.sendMessage(
          this.baseConfigService.userRequestMemeChannel,
          "üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
          { disable_notification: true }
        );
      } catch (e) {
        Logger.warn(
          `Cannot forward reply_to_message: ${e.message}`,
          UserPostManagementService.name
        );

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å, —Ç–æ —Ö–æ—Ç—è –±—ã –ø–æ—è—Å–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
        await this.bot.api.sendMessage(
          this.baseConfigService.userRequestMemeChannel,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
          { disable_notification: true }
        );
      }
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const message = await ctx.api.copyMessage(
      this.baseConfigService.userRequestMemeChannel,
      ctx.message.chat.id,
      ctx.message.message_id,
      { disable_notification: true }
    );

    // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.bot.api.pinChatMessage(
      this.baseConfigService.userRequestMemeChannel,
      message.message_id,
      { disable_notification: true }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ë–î
    await this.userRequestService.repository.insert({
      user: user,
      isAnonymousPublishing: ctx.session.anonymousPublishing,
      originalMessageId: ctx.message.message_id,
      userRequestChannelMessageId: message.message_id,
      isTextRequest: true,
      replyToMessageId: ctx.message.reply_to_message?.message_id // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –æ—Ç–≤–µ—Ç
    });

    await this.userService.updateUserLastActivity(ctx);

  }


  public async handleUserMemeRequest(ctx: BotContext): Promise<void> {
    try {
      await ctx.react('üëç');
    } catch (e) {
      await ctx.reply('–ú—ã –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∏ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º');
      Logger.warn(
        `Cannot set message reaction for user message in bot ${ctx.me.id}`,
        UserPostManagementService.name
      );
    }

    const user = await this.userService.repository.findOne({
      where: { id: ctx.message.from.id },
    });

    const { first_name, last_name, username, is_bot, is_premium } = ctx.message.from;

    let userText = [
      '–ü–æ—Å—Ç –æ—Ç',
      is_premium ? 'üëë' : null,
      is_bot ? 'ü§ñ' : null,
      first_name,
      last_name,
      username ? `@${username}` : null,
      '\n#–ø—Ä–µ–¥–ª–æ–∂–∫–∞',
    ]
      .filter((v) => !!v)
      .join(' ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ (–¥–ª—è –≤–∏–¥–µ–æ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    let menuToUse: Menu<BotContext> = this.moderatedPostMenu;
    let hasPossibleDuplicate = false;
    let bestMatch = null;
    let scheduledDuplicate = null;

    if (ctx.message?.photo) {
      const hash = await this.deduplicationService.getPostImageHash(ctx.message.photo);
      if (hash) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        const duplicates = await this.deduplicationService.checkDuplicate(hash);

        if (duplicates.some((duplicate) => duplicate.distance >= 0.5)) {
          // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          bestMatch = duplicates.reduce((prev, current) =>
            prev.distance > current.distance ? prev : current
          );

          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          const matchPercentage = Math.round(bestMatch.distance * 100);

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏–∫–∞—Ç–µ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          userText += `\nüîÑ –í–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ${matchPercentage}%)`;
          hasPossibleDuplicate = true;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          menuToUse = this.duplicateMenu;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ä–µ–¥–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
          scheduledDuplicate = await this.checkScheduledDuplicates(hash);

          console.log(scheduledDuplicate);

          if (scheduledDuplicate && this.isValidDate(scheduledDuplicate.scheduledDate)) {
            const matchPercentage = Math.round(scheduledDuplicate.distance * 100);

            try {
              const formattedDate = format(
                scheduledDuplicate.scheduledDate,
                'dd.LL.yy –≤ ~HH:mm',
                { locale: ru }
              );

              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥—É–±–ª–∏–∫–∞—Ç–µ
              userText += `\nüïí –ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç (${matchPercentage}%) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${formattedDate}`;
            } catch (error) {
              // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
              userText += `\nüïí –ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç (${matchPercentage}%) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`;
            }

            hasPossibleDuplicate = true;
            menuToUse = this.duplicateMenu;
          }
        }
      }
    }

    await this.bot.api.sendMessage(this.baseConfigService.userRequestMemeChannel, userText, {
      disable_notification: true,
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç —Å—Ä–µ–¥–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if (hasPossibleDuplicate && bestMatch) {
      try {
        await this.bot.api.forwardMessage(
          this.baseConfigService.userRequestMemeChannel,
          this.baseConfigService.memeChanelId,
          bestMatch.memePostId,
          { disable_notification: true }
        );
      } catch (error) {
        Logger.error(
          `Failed to forward duplicate post ${bestMatch.memePostId}: ${error.message}`,
          UserPostManagementService.name
        );
      }
    }

// –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç —Å—Ä–µ–¥–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if (hasPossibleDuplicate && scheduledDuplicate && !bestMatch) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (this.isValidDate(scheduledDuplicate.scheduledDate)) {
          const formattedDate = format(
            scheduledDuplicate.scheduledDate,
            'dd.LL.yy –≤ ~HH:mm',
            { locale: ru }
          );

          const timeDistance = formatDistance(
            scheduledDuplicate.scheduledDate,
            new Date(),
            { locale: ru, addSuffix: false }
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
          await this.bot.api.sendMessage(
            this.baseConfigService.userRequestMemeChannel,
            `üëÜ –ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${formattedDate} (—á–µ—Ä–µ–∑ ${timeDistance})\n\nID –ø–æ—Å—Ç–∞: ${scheduledDuplicate.postId}`,
            { disable_notification: true }
          );
        } else {
          // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          await this.bot.api.sendMessage(
            this.baseConfigService.userRequestMemeChannel,
            `üëÜ –ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\nID –ø–æ—Å—Ç–∞: ${scheduledDuplicate.postId}`,
            { disable_notification: true }
          );
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        try {
          const scheduledPost = await this.postSchedulerService.getScheduledPostById(scheduledDuplicate.postId);
          if (scheduledPost && scheduledPost.requestChannelMessageId) {
            await this.bot.api.forwardMessage(
              this.baseConfigService.userRequestMemeChannel,
              this.baseConfigService.userRequestMemeChannel,
              scheduledPost.requestChannelMessageId,
              { disable_notification: true }
            );
          }
        } catch (err) {
          Logger.warn(
            `Failed to forward scheduled post preview: ${err.message}`,
            UserPostManagementService.name
          );
        }
      } catch (error) {
        Logger.error(
          `Failed to send scheduled duplicate info: ${error.message}`,
          UserPostManagementService.name
        );
      }
    }

    const message = await ctx.api.copyMessage(
      this.baseConfigService.userRequestMemeChannel,
      ctx.message.chat.id,
      ctx.message.message_id,
      { reply_markup: menuToUse, disable_notification: true }
    );

    await this.bot.api.pinChatMessage(
      this.baseConfigService.userRequestMemeChannel,
      message.message_id,
      { disable_notification: true }
    );

    await this.userRequestService.repository.insert({
      user: user,
      isAnonymousPublishing: ctx.session.anonymousPublishing,
      originalMessageId: ctx.message.message_id,
      userRequestChannelMessageId: message.message_id,
      possibleDuplicate: hasPossibleDuplicate,
      scheduledDuplicateId: scheduledDuplicate?.postId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
    });

    await this.userService.updateUserLastActivity(ctx);
  }



  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å—Ä–µ–¥–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
   */
  private async checkScheduledDuplicates(hash: string): Promise<{
    postId: number;
    distance: number;
    scheduledDate: Date;
  } | null> {
    if (!hash) return null;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
      const scheduledPosts = await this.postSchedulerService.getAllScheduledPosts();


      if (!scheduledPosts || scheduledPosts.length === 0) return null;

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º –∏ –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
      const potentialDuplicates = [];

      for (const post of scheduledPosts) {
        // –ï—Å–ª–∏ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
        if (post.hash && post.publishDate && this.isValidDate(post.publishDate)) {
          // –í—ã—á–∏—Å–ª—è–µ–º "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ" –º–µ–∂–¥—É —Ö–µ—à–∞–º–∏ (—á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏)
          const distance = this.deduplicationService.calculateHashDistance(hash, post.hash);

          // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ (—Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è)
          if (distance >= 0.5) {
            potentialDuplicates.push({
              postId: post.id,
              distance: distance,
              scheduledDate: post.publishDate
            });
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π
      if (potentialDuplicates.length > 0) {
        return potentialDuplicates.reduce((prev, current) =>
          prev.distance > current.distance ? prev : current
        );
      }

      return null;
    } catch (error) {
      Logger.error(
        `Failed to check scheduled duplicates: ${error.message}`,
        UserPostManagementService.name
      );
      return null;
    }
  }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
  private isValidDate(date: any): boolean {
    if (!date) return false;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Date, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
    const dateObj = date instanceof Date ? date : new Date(date);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ (–Ω–µ NaN)
    return !isNaN(dateObj.getTime());
  }




// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ buildDuplicateMenu, —á—Ç–æ–±—ã –æ–Ω —Ç–∞–∫–∂–µ –º–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
  private buildDuplicateMenu() {
    return new Menu<BotContext>('duplicate-check-menu', { autoAnswer: false })
      .text('‚úÖ –î—É–±–ª–∏–∫–∞—Ç', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–∞
          const message = await this.userRequestService.repository.findOne({
            relations: { user: true },
            where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
          if (message.scheduledDuplicateId) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
            const scheduledPost = await this.postSchedulerService.getScheduledPostById(message.scheduledDuplicateId);

            if (scheduledPost && this.isValidDate(scheduledPost.publishDate)) {
              const scheduledDateFormatted = format(
                scheduledPost.publishDate,
                'dd.LL.yy –≤ ~HH:mm',
                { locale: ru }
              );

              // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
              await this.bot.api.sendMessage(
                message.user.id,
                `–ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${scheduledDateFormatted}.\n–¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ`,
                {reply_to_message_id: message.originalMessageId}
              );
            } else {
              // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
              await this.bot.api.sendMessage(
                message.user.id,
                '–ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ'
              );
            }
          } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            await this.bot.api.sendMessage(
              message.user.id,
              '–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ'
            );

            // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç —Å–Ω–æ–≤–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
            const hash = await this.deduplicationService.getPostImageHash(ctx.callbackQuery.message.photo);
            if (hash) {
              const duplicates = await this.deduplicationService.checkDuplicate(hash);
              if (duplicates.length > 0) {
                const bestMatch = duplicates.reduce((prev, current) =>
                  prev.distance > current.distance ? prev : current
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
                try {
                  await this.bot.api.forwardMessage(
                    message.user.id,
                    this.baseConfigService.memeChanelId,
                    bestMatch.memePostId
                  );
                } catch (error) {
                  Logger.error(
                    `Failed to forward original post to user: ${error.message}`,
                    UserPostManagementService.name
                  );
                }
              }
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
          await this.userRequestService.repository.update(
            { id: message.id },
            {
              isApproved: false,
              isDuplicate: true,
              processedByModerator: { id: ctx.callbackQuery.from.id },
              moderatedAt: new Date(),
            }
          );

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
          await ctx.unpinChatMessage();
          await ctx.deleteMessage();
        }
      })
      .text('‚ùå –ù–µ –¥—É–±–ª–∏–∫–∞—Ç', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
          const message = await this.userRequestService.repository.findOne({
            relations: { user: true },
            where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–º–µ—á–∞—è —á—Ç–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–π–¥–µ–Ω–∞
          await this.userRequestService.repository.update(
            { id: message.id },
            {
              possibleDuplicate: false, // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –¥—É–±–ª–∏–∫–∞—Ç
              scheduledDuplicateId: null, // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç
              checkedByModerator: ctx.callbackQuery.from.id
            }
          );

          // –ó–∞–º–µ–Ω—è–µ–º –º–µ–Ω—é –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
          try {
            await ctx.editMessageReplyMarkup({
              reply_markup: this.moderatedPostMenu
            });
          } catch (error) {
            Logger.error(
              `Failed to update message menu: ${error.message}`,
              UserPostManagementService.name
            );

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
              const originalMessage = ctx.callbackQuery.message;
              await ctx.api.deleteMessage(originalMessage.chat.id, originalMessage.message_id);
              await ctx.api.copyMessage(
                originalMessage.chat.id,
                originalMessage.chat.id,
                originalMessage.message_id,
                {
                  reply_markup: this.moderatedPostMenu
                }
              );
            } catch (secondError) {
              Logger.error(
                `Failed to recreate message with new menu: ${secondError.message}`,
                UserPostManagementService.name
              );
            }
          }
        }
      })
      .row();
  }
  private buildModeratedPostMenu() {
    const menu = new Menu<BotContext>(PostModerationMenusEnum.MODERATION, { autoAnswer: false })
      .text('üëç –û–¥–æ–±—Ä–∏—Ç—å', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          await this.onModeratorApprovalActions(ctx);
          ctx.menu.nav(PostModerationMenusEnum.APPROVAL);
        }
      })
      .text('üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.IS_BASE_MODERATOR)) {
          await this.onModeratorRejectActions(ctx);
          ctx.menu.nav(PostModerationMenusEnum.REJECT);
        }
      })
      .row();

    const approvedSubmenu = new Menu<BotContext>(PostModerationMenusEnum.APPROVAL, {
      autoAnswer: false,
    })
      .text(
        async (ctx) => {
          const message = await this.userRequestService.repository.findOne({
            select: ['processedByModerator'],
            where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
            relations: { processedByModerator: true },
          });
          return `‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (${message.processedByModerator.username})`;
        },
        async (ctx) => {
          if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_PUBLISH_TO_CHANNEL)) {
            ctx.menu.nav(PostModerationMenusEnum.PUBLICATION);
          }
        }
      )
      .row()
      .text(async (ctx) => {
        const statistic = await this.userRequestService.userPostDiscardStatistic(ctx);
        return `üëé ${statistic.total} (${statistic.week})`;
      })
      .text(async (ctx) => {
        const statistic = await this.userRequestService.userPostApprovedStatistic(ctx);
        return `üëç ${statistic.total} (${statistic.day})`;
      })
      .text(async (ctx) => {
        const lastPostInfo = await this.userRequestService.lastPublishedPostTimeAgo(ctx);
        return `üóì ${lastPostInfo}`;
      })
      .row();

    const publishSubmenu = new Menu<BotContext>(PostModerationMenusEnum.PUBLICATION, {
      autoAnswer: false,
    })
      .text('–ö—Ä–∏–Ω–∂', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NIGHT_CRINGE))
      .text('–°–µ–π—á–∞—Å', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NOW_SILENT))
      .row()
      .text('–ë–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_INTERVAL))
      .row()
      .text('–ù–æ—á—å—é', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_NIGHT))
      .text('–£—Ç—Ä–æ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_MORNING))
      .text('–î–Ω–µ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_MIDDAY))
      .text('–í–µ—á–µ—Ä–æ–º', async (ctx) => this.onPublishActions(ctx, PublicationModesEnum.NEXT_EVENING))
      .row()
      .text('–ù–∞–∑–∞–¥', (ctx) => ctx.menu.nav(PostModerationMenusEnum.APPROVAL));

    const rejectSubmenu = new Menu<BotContext>(PostModerationMenusEnum.REJECT, {
      autoAnswer: false,
    })
      .text(
        async (ctx) => {
          const message = await this.userRequestService.repository.findOne({
            select: ['processedByModerator'],
            where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
            relations: { processedByModerator: true },
          });
          await ctx.unpinChatMessage(ctx.callbackQuery.message.message_id);
          return `üë® –û—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå (${message.processedByModerator.username})`;
        },
        async (ctx) => {
          if (
            this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_DELETE_REJECTED_POST)
          ) {
            await ctx.deleteMessage();
          }
        }
      )
      .row()
      .text('üîÅ', async (ctx) => {
        if (
          this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_RESTORE_DISCARDED_POST)
        ) {
          await this.onAdminApproveAfterReject(ctx);
          ctx.menu.nav(PostModerationMenusEnum.APPROVAL);
        }
      })
      .text(
        async (ctx) => {
          const stikesCount = await this.getUserStrikesCount(ctx);
          return `‚ùó ${stikesCount || 0}`;
        },
        async (ctx) => {
          if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_SET_STRIKE)) {
            ctx.menu.nav(PostModerationMenusEnum.STRIKE);
          }
        }
      )
      .text('üíÄ', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_MAKE_BAN)) {
          await this.onAdminApproveAfterReject(ctx);
          ctx.menu.nav(PostModerationMenusEnum.BAN);
        }
      })
      .row();

    const banConfirmation = new Menu<BotContext>(PostModerationMenusEnum.BAN, { autoAnswer: false })
      .text('–¢–æ—á–Ω–æ –≤ –±–∞–Ω?', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_MAKE_BAN)) {
          await this.banUser(ctx);
          await ctx.deleteMessage();
        }
        return;
      })
      .text('–ù–µ—Ç', async (ctx) => {
        ctx.menu.nav(PostModerationMenusEnum.REJECT);
      })
      .row();

    const strikeConfirmation = new Menu<BotContext>(PostModerationMenusEnum.STRIKE, {
      autoAnswer: false,
    })
      .text('–¢–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–π–∫?', async (ctx) => {
        if (this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_SET_STRIKE)) {
          await this.makeUserStrike(ctx);
          ctx.menu.nav(PostModerationMenusEnum.REJECT);
        }
      })
      .text('–ù–µ—Ç', async (ctx) => {
        ctx.menu.nav(PostModerationMenusEnum.REJECT);
      })
      .row();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–º–µ–Ω—é
    menu.register(publishSubmenu);
    menu.register(banConfirmation);
    menu.register(strikeConfirmation);
    menu.register(approvedSubmenu);
    menu.register(rejectSubmenu);

    this.moderatedPostMenu = menu;
    this.bot.use(this.moderatedPostMenu);

    // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
    this.duplicateMenu = this.buildDuplicateMenu();
    this.bot.use(this.duplicateMenu);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–∏—Ç—å
   */
  private async onModeratorApprovalActions(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });
    await this.userRequestService.repository.update(
      { id: message.id },
      {
        isApproved: true,
        processedByModerator: { id: ctx.callbackQuery.from.id },
        moderatedAt: new Date(),
      }
    );
    return;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞
   */
  private async onModeratorRejectActions(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      relations: { user: true },
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });

    await this.userRequestService.repository.update(
      { id: message.id },
      {
        isApproved: false,
        processedByModerator: { id: ctx.callbackQuery.from.id },
        moderatedAt: new Date(),
      }
    );
    await this.bot.api
      .forwardMessage(message.user.id, message.user.id, message.originalMessageId)
      .catch();
    await this.bot.api.sendMessage(
      message.user.id,
      '–ú—ã –Ω–µ –º–æ–∂–µ–º —Ç–∞–∫–æ–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, —Ç–≤–æ–π –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω'
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ—Å—Ç–∞
   */
  public async onPublishActions(ctx: BotContext, mode: PublicationModesEnum) {
    if (!this.userService.checkPermission(ctx, UserPermissionEnum.ALLOW_PUBLISH_TO_CHANNEL)) {
      return;
    }

    await ctx.unpinChatMessage(ctx.callbackQuery.message.message_id);
    const imageHash = await this.deduplicationService.getPostImageHash(
      ctx?.callbackQuery?.message?.photo
    );
    console.log(imageHash);

    const publishContext: ScheduledPostContextInterface = {
      mode,
      requestChannelMessageId: ctx.callbackQuery.message.message_id,
      processedByModerator: ctx.callbackQuery.from.id,
      caption: ctx.callbackQuery?.message?.caption,
      isUserPost: true,
      hash: imageHash,
    };



    switch (mode) {
      case PublicationModesEnum.NOW_SILENT:
        return this.onPublishNow(publishContext);
      case PublicationModesEnum.NEXT_MORNING:
      case PublicationModesEnum.NEXT_MIDDAY:
      case PublicationModesEnum.NEXT_EVENING:
      case PublicationModesEnum.NEXT_INTERVAL:
      case PublicationModesEnum.NEXT_NIGHT:
        return this.publishScheduled(publishContext);
      case PublicationModesEnum.NIGHT_CRINGE:
        return this.publishNightCringeScheduled(publishContext);
    }
  }

  private handleAdminUserResponse(): void {
    this.replyToBotContext.on(['message', 'channel_post'], async (ctx) => {
      const adminMessageId = ctx?.channelPost?.message_id || ctx?.message?.message_id;
      const message = await this.userRequestService.repository.findOne({
        where: { userRequestChannelMessageId: ctx.channelPost.reply_to_message.message_id },
        relations: { user: true },
      });

      try {
        // —É–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.bot.api.setMessageReaction(
          message.user.id,
          message.originalMessageId,
          []
        );
      } catch (e) {
        Logger.warn(
          `Cannot remove reaction message for user message for bot ${ctx.me.id}`,
          UserPostManagementService.name
        );
      }

      // –∫–æ–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.bot.api.copyMessage(message.user.id, ctx.chat.id, adminMessageId, {
        reply_to_message_id: message.originalMessageId,
      });

      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message.isTextRequest) {
        try {
          await this.bot.api.unpinChatMessage(
            this.baseConfigService.userRequestMemeChannel,
            message.userRequestChannelMessageId
          );
        } catch (e) {
          Logger.warn(
            `Cannot unpin text request after admin response for bot ${ctx.me.id}`,
            UserPostManagementService.name
          );
        }
      }
    });
  }


  public async onPublishNow(publishContext: ScheduledPostContextInterface) {
    const message = await this.userRequestService.repository.findOne({
      relations: { user: true },
      where: {
        userRequestChannelMessageId: publishContext.requestChannelMessageId,
      },
    });

    let caption = '';
    if (publishContext.caption) {
      caption += `${publishContext.caption}\n\n`;
    }

    if (!message.isAnonymousPublishing) {
      const chatInfo = await this.bot.api.getChat(message.user.id);
      if (chatInfo['username']) {
        caption += `#–ø—Ä–µ–¥–ª–æ–∂–∫–∞ @${chatInfo['username']}\n`;
      } else {
        caption += `#–ø—Ä–µ–¥–ª–æ–∂–∫–∞ ${[chatInfo['first_name'], chatInfo['last_name']]
          .filter((item) => !!item)
          .join(' ')}\n`;
      }
    } else {
      caption += `#–ø—Ä–µ–¥–ª–æ–∂–∫–∞\n`;
    }

    if (publishContext.mode === PublicationModesEnum.NIGHT_CRINGE) {
      const channelHtmlLink = await this.settingsService.cringeChannelHtmlLink();
      caption += channelHtmlLink;
    } else {
      const channelHtmlLink = await this.settingsService.channelHtmlLinkIfPrivate();
      caption += channelHtmlLink;
    }
    const channelInfo = await this.bot.api.getChat(this.baseConfigService.memeChanelId);

    const publishedMessage = await this.bot.api.copyMessage(
      this.baseConfigService.memeChanelId,
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      {
        caption: caption,
        parse_mode: 'HTML',
        disable_notification: publishContext.caption === PublicationModesEnum.NOW_SILENT,
      }
    );

    await this.userRequestService.repository.update(
      { id: message.id },
      {
        isPublished: true,
        publishedAt: new Date(),
        publishedBy: publishContext.processedByModerator,
        publishedMessageId: publishedMessage.message_id,
      }
    );

    await this.bot.api.forwardMessage(message.user.id, channelInfo.id, publishedMessage.message_id);

    let userFeedbackMessage = '–¢–≤–æ–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω \n';
    if (publishContext.mode !== PublicationModesEnum.NIGHT_CRINGE) {
      userFeedbackMessage += '–ü—Ä–∏—Å—ã–ª–∞–π –µ—â–µ!\n';
    } else {
      const cringeChannelLink = await this.settingsService.cringeChannelHtmlLink();
      userFeedbackMessage += `–£—Ç—Ä–æ–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–∞–Ω–∞–ª ${cringeChannelLink}`;
    }

    await this.bot.api.sendMessage(message.user.id, userFeedbackMessage, { parse_mode: 'HTML' });

    const user = await this.userService.repository.findOne({
      where: { id: publishContext.processedByModerator },
    });

    const url = await this.settingsService.channelLinkUrl();
    const inlineKeyboard = new InlineKeyboard().url(`üë® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (${user.username})`, url).row();

    await this.bot.api.editMessageReplyMarkup(
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      { reply_markup: inlineKeyboard }
    );

    if (publishContext.mode == PublicationModesEnum.NIGHT_CRINGE) {
      await this.cringeManagementService.repository.update(
        { requestChannelMessageId: publishContext.requestChannelMessageId },
        { memeChannelMessageId: publishedMessage.message_id }
      );
    }

    await this.deduplicationService.createPublishedPostHash(
      publishContext.hash,
      publishedMessage.message_id
    );
  }

  private async publishNightCringeScheduled(
    publicContext: ScheduledPostContextInterface
  ): Promise<void> {
    await this.cringeManagementService.repository.insert({
      requestChannelMessageId: publicContext.requestChannelMessageId,
      isUserPost: publicContext.isUserPost,
    });
    await this.publishScheduled(publicContext);
  }

  private async publishScheduled(publishContext: ScheduledPostContextInterface): Promise<void> {
    const publishDate = await this.postSchedulerService.addPostToSchedule(publishContext);

    if (!publishDate) {
      return;
    }

    const dateFormatted = format(
      PostSchedulerService.formatToMsk(publishDate),
      'dd.LL.yy –≤ ~HH:mm'
    );

    const user = await this.userService.repository.findOne({
      where: { id: publishContext.processedByModerator },
    });

    const inlineKeyboard = new InlineKeyboard()
      .text(`‚è∞ ${dateFormatted} (${user.username})`)
      .row();

    await this.bot.api.editMessageReplyMarkup(
      this.baseConfigService.userRequestMemeChannel,
      publishContext.requestChannelMessageId,
      { reply_markup: inlineKeyboard }
    );

    const message = await this.userRequestService.repository.findOne({
      relations: { user: true },
      where: {
        userRequestChannelMessageId: publishContext.requestChannelMessageId,
      },
    });

    await this.bot.api.forwardMessage(message.user.id, message.user.id, message.originalMessageId);

    let userFeedbackMessage = `–¢–≤–æ–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ${dateFormatted} ‚è±\n\n`;
    if (publishContext.mode === PublicationModesEnum.NIGHT_CRINGE) {
      const cringeChannelLink = await this.settingsService.cringeChannelHtmlLink();
      userFeedbackMessage += `–ü–æ—Å—Ç –ø–æ–ø–∞–ª –≤ –æ—Å–æ–±—É—é —Ä—É–±—Ä–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é, –∞ —É—Ç—Ä–æ–º –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: ${cringeChannelLink}\n`;
    }
    userFeedbackMessage += '–ü—Ä–∏—Å—ã–ª–∞–π –µ—â–µ üòâÔ∏è';

    await this.bot.api.sendMessage(message.user.id, userFeedbackMessage, { parse_mode: 'HTML' });

    return Promise.resolve();
  }

  private async onAdminApproveAfterReject(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      relations: { user: true },
      where: {
        userRequestChannelMessageId: ctx.update.callback_query.message.message_id,
      },
    });

    await this.userRequestService.repository.update(
      { id: message.id },
      {
        restoredBy: ctx.config.user.id,
        isApproved: true,
      }
    );

    await this.bot.api.forwardMessage(message.user.id, message.user.id, message.originalMessageId);
    await this.bot.api.sendMessage(
      message.user.id,
      '–ú—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏! ü§Ø\n\n' +
        '–¢–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç, –º—ã –¥–æ–ª–≥–æ –¥—É–º–∞–ª–∏, —Å–º–µ—è–ª–∏ –ø–æ—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –µ–≥–æ –≤—Å–µ–º –∫–æ–º—É –º–æ–≥–ª–∏, ' +
        '–≤ –∏—Ç–æ–≥–µ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! üéâ\n' +
        '–ü—Ä–æ—Å—Ç–∏ —á—Ç–æ —Ç–∞–∫ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —Å —Ç–æ–±–æ–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º—ã –±—É–¥–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. ü•∫\n' +
        'P.S. –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üòâ'
    );
  }

  public async banUser(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
      relations: { user: true },
    });

    await this.userService.repository.update(
      { id: message.user.id },
      {
        isBanned: true,
        bannedBy: ctx.callbackQuery.from.id,
        banUntilTo: add(new Date(), { months: 1 }),
      }
    );

    await this.bot.api.sendMessage(
      message.user.id,
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —Ç.–∫. ' +
        '—Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, ' +
        '–Ω–∞–º –∂–∞–ª—å —á—Ç–æ –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ª—å —Å–µ—Ä—å–µ–∑–Ω—É—é –º–µ—Ä—É, ' +
        '–Ω–æ —É –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞.\n\n' +
        '–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
    );
  }

  private async makeUserStrike(ctx: BotContext) {
    const message = await this.userRequestService.repository.findOne({
      where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
      relations: { user: true },
    });

    await this.userService.repository.update(
      { id: message.user.id },
      {
        strikes: (message.user.strikes || 0) + 1,
      }
    );
  }

  private async getUserStrikesCount(ctx: BotContext): Promise<number> {
    const message = await this.userRequestService.repository.findOne({
      where: { userRequestChannelMessageId: ctx.callbackQuery.message.message_id },
      relations: { user: true },
    });

    return message.user.strikes;
  }

  private async isLastRequestMoreThanMinuteAgo(ctx: BotContext): Promise<boolean> {
    if (
      !ctx.session?.lastPublishedAt ||
      ctx.session?.lastPublishedAt + 60 < getUnixTime(new Date())
    ) {
      ctx.session.lastPublishedAt = getUnixTime(new Date());
      return true;
    }
    return false;
  }

  private prepareReplyToBotContext(): void {
    this.replyToBotContext = this.bot.filter(async (ctx: BotContext) => {
      if ( !ctx?.channelPost?.reply_to_message && !ctx?.message?.reply_to_message) {
        return false;
      }
      const message = await this.userRequestService.repository.findOne({
        where: { userRequestChannelMessageId: ctx?.channelPost?.reply_to_message?.message_id || ctx?.message?.reply_to_message?.message_id },
      });
      return !!message;

    });
  }
}
