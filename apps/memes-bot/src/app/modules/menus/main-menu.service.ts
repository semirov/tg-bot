import { Inject, Injectable } from '@nestjs/common';
import { Menu } from '@grammyjs/menu';
import { UserMenusEnum } from './constants/bot-menus.enum';
import { BOT } from '../bot/providers/bot.provider';
import { Bot, CommandContext } from 'grammy';
import { BotContext } from '../bot/interfaces/bot-context.interface';
import { AdminMenuService } from './admin-menu.service';
import { ModeratorMenuService } from './moderator-menu.service';
import { ConversationsEnum } from '../post-management/constants/conversations.enum';
import { UserService } from '../bot/services/user.service';

@Injectable()
export class MainMenuService {
  constructor(
    @Inject(BOT) private bot: Bot<BotContext>,
    private adminMenuService: AdminMenuService,
    private moderatorStartMenuService: ModeratorMenuService,
    private userService: UserService
  ) {}

  private userStartMenu: Menu<BotContext>;
  private adminStartMenu: Menu<BotContext>;
  private moderatorStartMenu: Menu<BotContext>;

  public readonly MEME_RULES =
    '<b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b>\n' +
    '- –°–º–µ—à–Ω—ã–µ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ–º—ã (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–∏—Ñ–∫–∏, –≤–∏–¥–µ–æ)\n' +
    '- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã (NSFW –∑–∞–ø—Ä–µ—â—ë–Ω)\n' +
    '- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ —Ä–µ–∫–ª–∞–º—ã\n\n' +

    '<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§:</b>\n' +
    '- –ó–∞–ø—Ä–µ—â–µ–Ω—ã —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n' +
    '- –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ –±—É–ª–ª–∏–Ω–≥\n' +
    '- –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, –Ω–∞—Å–∏–ª–∏—è –∏ —Å—É–∏—Ü–∏–¥–∞\n' +
    '- –ù–µ–ª—å–∑—è –Ω–∞—Ä—É—à–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∏–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)\n\n' +

    '<b>–ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:</b>\n' +
    '- –ü–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏–ª–∏ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞\n' +
    '- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω—É –ø–æ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º\n' +
    '- –ü—É–±–ª–∏–∫—É–µ–º—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ—Ä–æ–º (–µ—Å–ª–∏ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ)\n' +
    '- –ü–æ—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ —Å—Ä–∞–∑—É (–æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏)\n\n' +

    '<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n' +
    '- –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∏–ª–∏ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—è–µ—Ç—Å—è\n' +
    '- –°–ø–∞–º, —Ñ–ª—É–¥ –∏ —Ñ–µ–π–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã\n' +
    '- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–æ –±–∞–Ω–Ω–∏—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è';


  private buildStartUserMenu(): Menu<BotContext> {
    const menu = new Menu<BotContext>(UserMenusEnum.USER_START_MENU)
      .text('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞', (ctx) => ctx.reply(this.MEME_RULES, { parse_mode: 'HTML' }))
      .row()
      .submenu('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'main-settings-menu')
      .row()
      .text('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', async (ctx) => {
        await ctx.reply('–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç')
      })
      .row()
      .url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'https://t.me/filipp_memes');

    const settings = new Menu<BotContext>('main-settings-menu')
      .text(
        (ctx) => (ctx.session.canBeModeratePosts ? 'üëÆ –û—Ü–µ–Ω–∏–≤–∞—é –ø–æ—Å—Ç—ã' : 'üôÖ –ù–µ –æ—Ü–µ–Ω–∏–≤–∞—é –ø–æ—Å—Ç—ã'),
        async (ctx) => {
          ctx.session.canBeModeratePosts = !ctx.session.canBeModeratePosts;
          await this.userService.changeUserModeratedMode(
            ctx.from.id,
            ctx.session.canBeModeratePosts
          );
          ctx.menu.update();
        }
      )
      .row()
      .back('–ù–∞–∑–∞–¥');

    menu.register(settings);

    return menu;
  }

  public getRoleBasedStartMenu(ctx: CommandContext<BotContext> | BotContext): Menu {
    switch (true) {
      case ctx.config.isOwner:
        return this.adminStartMenu;
      case ctx.config?.user?.isModerator:
        return this.moderatorStartMenu;
      default:
        return this.userStartMenu;
    }
  }

  public initStartMenu(): void {
    this.userStartMenu = this.buildStartUserMenu();
    this.moderatorStartMenu = this.moderatorStartMenuService.buildStartModeratorMenu(
      this.userStartMenu
    );
    this.adminStartMenu = this.adminMenuService.buildStartAdminMenu(
      this.userStartMenu,
      this.moderatorStartMenu
    );
    this.bot.use(this.userStartMenu);
    this.bot.use(this.moderatorStartMenu);
    this.bot.use(this.adminStartMenu);
  }
}
