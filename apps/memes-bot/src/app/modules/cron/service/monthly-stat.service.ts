import { Inject, Injectable } from '@nestjs/common';
import { UserRequestService } from '../../bot/services/user-request.service';
import { BOT } from '../../bot/providers/bot.provider';
import { Bot, InlineKeyboard } from 'grammy';
import { BotContext } from '../../bot/interfaces/bot-context.interface';
import { sub } from 'date-fns';
import { BaseConfigService } from '../../config/base-config.service';

export type StatisticRequestType = {
  isAnonymousPublishing: boolean;
  userId: string;
  username: string;
  firstName: string;
  lastName: string;
  count: string;
};

@Injectable()
export class MonthlyStatService {
  constructor(
    private userRequestService: UserRequestService,
    @Inject(BOT) private bot: Bot<BotContext>,
    private baseConfigService: BaseConfigService
  ) {}

  private getNameFromStatItem(item: StatisticRequestType): string {
    if (item.username) {
      return `@${item.username}`;
    }

    return [item.firstName, item.lastName].filter((item) => !!item).join(' ');
  }

  private leaderBoardIconByIndex(index: string): string {
    const icons = {
      '0': 'üèÖ',
      '1': 'ü•à',
      '2': 'ü•â',
    };

    const icon = icons[index];
    if (icon) {
      return `${icon} `;
    }
    return ``;
  }

  public async publishMonthlyStatistic(): Promise<void> {
    const statistics = await this.getUserStatistic();

    let text =
      '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–∫–∏\n' +
      '—Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ—Å—Ç—ã ‚ù§Ô∏è\n\n';
    for (const index in statistics) {
      const item = statistics[index];
      text += `${this.leaderBoardIconByIndex(index)}${this.getNameFromStatItem(item)} - ${
        item.count
      }\n\n`;
    }

    text += '–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞ üòâ\n';
    text += '#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';

    const me = await this.bot.api.getMe();

    const inlineKeyboard = new InlineKeyboard().url('–ü—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Å—Ç', `https://t.me/${me.username}`);

    const message = await this.bot.api.sendMessage(this.baseConfigService.memeChanelId, text, {
      reply_markup: inlineKeyboard,
    });

    this.sendPersonalStatistic(statistics, message.message_id);
  }

  private async getUserStatistic(): Promise<StatisticRequestType[]> {
    const queryBuilder = this.userRequestService.repository.createQueryBuilder('userRequest');
    return await queryBuilder
      .leftJoinAndSelect('userRequest.user', 'user')
      .select('user.id', 'userId')
      .addSelect('user.username', 'username')
      .addSelect('user.firstName', 'firstName')
      .addSelect('user.lastName', 'lastName')
      .addSelect('COUNT(userRequest.id)', 'count')
      .where('userRequest.isPublished = true')
      .andWhere('userRequest.publishedAt >= :date', { date: sub(new Date(), { months: 1 }) })
      .groupBy('user.id')
      .orderBy('count', 'DESC')
      .limit(10)
      .getRawMany();
  }

  private async sendPersonalStatistic(
    statistics: StatisticRequestType[],
    statisticMessageId: number
  ): Promise<void> {
    for (const index in statistics) {
      const item = statistics[index];
      let text = `–ü—Ä–∏–≤–µ—Ç!\n\n–¢—ã –≤ —Ç–æ–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–∫–∏ üéâüéâ\n\n`;
      text += `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤ - ${item.count}\n`;
      text += `–¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ - ${Number(index) + 1}\n\n`;
      text += `–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ—Å—Ç—ã ‚ù§Ô∏è`;

      const userId = item.userId;
      try {
        await this.bot.api.sendMessage(userId, text);
        await this.bot.api.forwardMessage(
          +userId,
          this.baseConfigService.memeChanelId,
          statisticMessageId
        );
      } catch (e) {
        console.error('[Error while sent personal statistic]', e);
      }
    }
  }
}
