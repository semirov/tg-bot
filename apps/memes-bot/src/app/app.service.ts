import { Inject, Injectable, OnModuleInit } from '@nestjs/common';
import { MainMenuService } from './modules/menus/main-menu.service';
import { BOT } from './modules/bot/providers/bot.provider';
import { Bot, CommandContext, InlineKeyboard } from 'grammy';
import {
  BotContext,
  CaptchaValuesInterface,
} from './modules/bot/interfaces/bot-context.interface';
import { BaseConfigService } from './modules/config/base-config.service';
import { UserService } from './modules/bot/services/user.service';
import { UserPostManagementService } from './modules/post-management/user-post-management.service';
import { ConversationsEnum } from './modules/post-management/constants/conversations.enum';
import { SettingsService } from './modules/bot/services/settings.service';
import { Conversation, createConversation } from '@grammyjs/conversations';

@Injectable()
export class AppService implements OnModuleInit {
  constructor(
    private mainMenuService: MainMenuService,
    @Inject(BOT) private bot: Bot<BotContext>,
    private baseConfigService: BaseConfigService,
    private userPostManagementService: UserPostManagementService,
    private userService: UserService,
    private settingsService: SettingsService
  ) {}

  public onModuleInit(): void {
    this.bot.use(
      createConversation(this.prepareCaptchaConversation.bind(this), 'privateBotCaptcha')
    );
    this.mainMenuService.initStartMenu();
    this.onStartCommand();
    this.onMenuCommand();
    this.onUserMessage();
    this.onNewMember();
  }


  private onMenuCommand() {
    this.bot.command('menu', async (ctx: CommandContext<BotContext>) => {
      await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å', {
        reply_markup: this.mainMenuService.getRoleBasedStartMenu(ctx),
      });
      await this.userService.updateUserLastActivity(ctx);
    });
  }

  private onStartCommand() {
    this.bot.command(['start'], async (ctx) => {
      const channelLink = await this.settingsService.channelHtmlLink();

      const text =
        '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –∫–∞–Ω–∞–ª–∞' +
        ` ${channelLink}\n\n` +
        '–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Å—Ç\n' +
        '–∏–ª–∏ –Ω–∞–∂–º–∏ /menu, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.\n\n' +
        '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      await ctx.reply(text, { parse_mode: 'HTML' });
      await this.userService.updateUserLastActivity(ctx);
    });
  }

  private onUserMessage() {
    this.bot.on(['message'], async (ctx: BotContext) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
      if (!ctx.session.captchaSolved) {
        return this.sendCaptcha(ctx);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–Ω–∞–ª—É
      const chatMember = await this.bot.api.getChatMember(this.baseConfigService.memeChanelId, ctx.from.id);

      if (!['member', 'creator', 'administrator'].includes(chatMember.status)) {
        try {
          await this.approveUserJoin(ctx);
        } catch (e) {
          await this.sendLinkForNonSubscribedUser(ctx);
        }
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userService.updateUserLastActivity(ctx);

      // –¢–µ–ø–µ—Ä—å —Ä–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (ctx.message.photo || ctx.message.video) {
        // –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        await this.userPostManagementService.handleUserMemeRequest(ctx);
      } else if (ctx.message.text) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await this.userPostManagementService.handleUserTextRequest(ctx);
      } else {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, —Å–æ–æ–±—â–∞–µ–º –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        await ctx.reply(
          '–Ø –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. ' +
          '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º. ' +
          '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.'
        );
      }
    });
  }

  public randomIntFromInterval(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1) + min)
  }

  public prepareCaptchaValues(): CaptchaValuesInterface {
    const values = [
      this.randomIntFromInterval(1, 25),
      this.randomIntFromInterval(1, 25),
    ].sort((a, b) => b - a);
    const [first, second] = values;

    const operandCase = this.randomIntFromInterval(0, 1);
    let operand = '-';
    let result = 0;
    switch (operandCase) {
      case 0:
        result = first + second;
        operand = '+';
        break;
      case 1:
        result = first - second;
        operand = '-';
        break;
    }
    return {operand, result, first, second};
  }

  private async sendCaptcha(ctx: BotContext): Promise<void> {
    if (!ctx.session.captchaValues) {
      ctx.session.captchaValues = this.prepareCaptchaValues();
    }
    await ctx.conversation.enter('privateBotCaptcha');
  }

  private onNewMember() {
    this.bot.on(['chat_join_request'], async (ctx: BotContext) => {
      let message = `–£–≤—ã, –Ω–æ —è —Å—Ç–∞–ª–∫–∏–≤–∞—é—Å—å —Å –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –±–æ—Ç–æ–≤. –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ —Ç—ã –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫,`;
      message += ` –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É.\n`;
      message += `–†–µ—à–∏ –µ–µ –∏ –±–æ—Ç –ø—É—Å—Ç–∏—Ç —Ç–µ–±—è –≤ –∫–∞–Ω–∞–ª`;
      await this.bot.api.sendMessage(ctx.chatJoinRequest.from.id, message, {
        parse_mode: 'HTML'
      });
      return;
    });
  }

  private async approveUserJoin(ctx: BotContext) {
    const { first_name, last_name, username, is_bot, is_premium, id } = (ctx?.chatJoinRequest || ctx).from;
    await this.bot.api.approveChatJoinRequest(this.baseConfigService.memeChanelId, id);
    const channelInfo = await this.bot.api.getChat(this.baseConfigService.memeChanelId);
    const channelUrl = await this.settingsService.channelLinkUrl();
    let messageText = `–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª <b>${channelInfo['title']}</b>!`;
    messageText += '\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–≤–æ–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ –≤ –±–æ—Ç–∞.';
    messageText += '\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ';
    messageText += '\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º –≤ –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω—É';
    const menu = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', channelUrl);
    await this.bot.api.sendMessage(id, messageText, {
      reply_markup: menu,
      parse_mode: 'HTML'
    });

    const text = [
      '–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫:\n',
      is_premium ? 'üëë' : null,
      is_bot ? 'ü§ñ' : null,
      first_name,
      last_name,
      username ? `@${username}` : null
    ]
      .filter((v) => !!v)
      .join(' ');

    await this.bot.api.sendMessage(this.baseConfigService.ownerId, text);
  }

  private async prepareCaptchaConversation(
    conversation: Conversation<BotContext>,
    ctx: BotContext
  ): Promise<void> {
    const {first, second, operand, result} = conversation.session.captchaValues;
    let message = `–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –±–æ—Ç —Ç—ã –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫.\n`;
    message += `–ü–æ–∫–∞ —Ç—ã –Ω–µ —Ä–µ—à–∏—à—å —ç—Ç—É –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—á–∞—Ç—å\n\n`;
    message += `–ß–µ–º—É —Ä–∞–≤–Ω–æ <b>${first} ${operand} ${second}?</b>\n\n`;
    message += `–û—Ç–≤–µ—Ç –ø—Ä–∏—à–ª–∏ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º`;
    const captchaMessage = await ctx.reply(message, {parse_mode: 'HTML'});

    // eslint-disable-next-line no-constant-condition
    while (true) {
      const answerCtx = await conversation.wait();

      if (Number(answerCtx?.message?.text?.trim()) === result) {
        await answerCtx.deleteMessage();
        await answerCtx.api.deleteMessage(captchaMessage.chat.id, captchaMessage.message_id);
        conversation.session.captchaValues = null;
        conversation.session.captchaSolved = true;
        const chatMember = await conversation.external(async () =>
          this.bot.api.getChatMember(this.baseConfigService.memeChanelId, ctx.from.id)
        );

        if (!['member', 'creator', 'administrator'].includes(chatMember.status)) {
          try {
            await conversation.external(async () => this.approveUserJoin(ctx));
          } catch (e) {
            await this.sendLinkForNonSubscribedUser(ctx);
          }
          return;
        }

        await this.userService.updateUserLastActivity(ctx);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
        if (ctx.message.photo || ctx.message.video) {
          await conversation.external(async () =>
            this.userPostManagementService.handleUserMemeRequest(ctx)
          );
        } else if (ctx.message.text && !ctx.message.text.startsWith('/')) {
          await conversation.external(async () =>
            this.userPostManagementService.handleUserTextRequest(ctx)
          );
        } else {
          // –î–ª—è –∫–æ–º–∞–Ω–¥ –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
          await ctx.reply(
            '–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ' +
            '–ù–∞–∂–º–∏ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.'
          );
        }
        return;
      }

      await answerCtx.deleteMessage();
      const session = conversation.session;
      const {first, second, operand} = session.captchaValues;
      await ctx.reply(`–ö–∞–ø—á—É –≤—Å–µ —Ç–∞–∫–∏ –Ω–∞–¥–æ —Ä–µ—à–∏—Ç—å\n–ß–µ–º—É —Ä–∞–≤–Ω–æ <b>${first} ${operand} ${second}?</b>`, {parse_mode: 'HTML'});
    }
  }

  public async sendLinkForNonSubscribedUser(ctx: BotContext): Promise<void> {
    const channelInfo = await this.bot.api.getChat(this.baseConfigService.memeChanelId);
    const channelUrl = await this.settingsService.channelLinkUrl();
    let messageText = `–ö–∞–∫ —Ç–∞–∫ –≤—ã—à–ª–æ —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ <b>${channelInfo['title']}</b>?`;
    messageText += '\n\n–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å, –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ—Å—Ç—ã –∏–ª–∏ –ø–∏—à–∏ –∞–¥–º–∏–Ω—É';
    const menu = new InlineKeyboard().url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', channelUrl);
    await this.bot.api.sendMessage(ctx.from.id, messageText, {
      reply_markup: menu,
      parse_mode: 'HTML'
    });
  }
}
