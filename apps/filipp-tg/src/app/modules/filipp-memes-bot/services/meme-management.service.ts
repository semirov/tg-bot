import { OnModuleInit, UseFilters } from '@nestjs/common';
import { Action, Ctx, InjectBot, Update } from 'nestjs-telegraf';
import { TelegrafExceptionFilter } from '../filters/telegraf-exception.filter';
import { Context } from '../interfaces/context.interface';
import { Telegraf } from 'telegraf';
import { MEME_BOT } from '../filipp-meme-bot.const';
import { environment } from '../../../../environments/environment';
import { Update as TelegramUpdate } from 'telegraf/typings/core/types/typegram';
import {CommonService} from "./common.service";
import {BaseConfigService} from "../../../config/base-config.service";

@Update()
@UseFilters(TelegrafExceptionFilter)
export class MemeManagementService {
  constructor(
    @InjectBot(MEME_BOT)
    private readonly bot: Telegraf<Context>,
    private baseConfigService: BaseConfigService
  ) {}

  private memeChannelId = this.baseConfigService.memeChanelId;
  private testChannelId = this.baseConfigService.testMemeChannel;
  private adminIds = this.baseConfigService.adminIds;
  private moderatorIds = this.baseConfigService.moderatorIds;

  public async sendMemeToApprove(message: Context['message']): Promise<void> {
    const approveMember = this.getRandomApproveMember();
    switch (approveMember.type) {
      case 'moderator':
        return this.approveViaModerator(
          message.chat.id,
          message.message_id,
          approveMember.userId
        );
      case 'admin':
      default:
        return this.approveViaAdmin(
          message.chat.id,
          message.message_id,
          approveMember.userId
        );
    }
  }

  private async approveViaAdmin(
    userChatId: number,
    userMemeMessageId: number,
    adminId: number,
    messageText = '–ö—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –º–µ–º'
  ): Promise<void> {
    const forward = await this.bot.telegram.forwardMessage(
      adminId,
      userChatId,
      userMemeMessageId
    );
    await this.bot.telegram.sendMessage(adminId, messageText, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
              callback_data: `admin_reject_requested_meme&${forward.message_id}&${userChatId}&${userMemeMessageId}`,
            },
            {
              text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
              callback_data: `admin_approve_requested_meme&${forward.message_id}&${userChatId}&${userMemeMessageId}`,
            },
          ],
          [
            {
              text: '–í —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª',
              callback_data: `admin_send_to_test&${forward.message_id}&${userChatId}&${userMemeMessageId}`,
            },
          ]
        ],
      },
    });
  }

  private async approveViaModerator(
    userChatId: number,
    userMemeMessageId: number,
    moderatorId: number
  ): Promise<void> {
    const forward = await this.bot.telegram.forwardMessage(
      moderatorId,
      userChatId,
      userMemeMessageId
    );
    const message =
      '–≠—Ç–æ—Ç –º–µ–º –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ–≥–æ –Ω—É–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.' +
      '–í —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è, –º–µ–º –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
    await this.bot.telegram.sendMessage(moderatorId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
              callback_data: `admin_reject_requested_meme&${forward.message_id}&${userChatId}&${userMemeMessageId}`,
            },
            {
              text: '–û–¥–æ–±—Ä–∏—Ç—å',
              callback_data: `moderator_approve_requested_meme&${forward.message_id}&${userChatId}&${userMemeMessageId}`,
            },
          ],
        ],
      },
    });
  }

  @Action(/moderator_approve_requested_meme/)
  async onModeratorApproveMeme(
    @Ctx() ctx: Context & { update: TelegramUpdate.CallbackQueryUpdate }
  ) {
    const data = ctx.update.callback_query && ctx.update.callback_query['data'];
    const [, /**/ forwardMessageId, chatId, userMemeMessageId] = (
      data || ''
    ).split('&');
    const adminId = CommonService.getRandomValueFromArray(this.adminIds);
    await this.approveViaAdmin(
      +chatId,
      +userMemeMessageId,
      adminId,
      '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –º–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    );

    await ctx.deleteMessage();
    await ctx.deleteMessage(+forwardMessageId);
  }

  @Action(/admin_reject_requested_meme/)
  async onAdminRejectMeme(
    @Ctx() ctx: Context & { update: TelegramUpdate.CallbackQueryUpdate }
  ) {
    const data = ctx.update.callback_query && ctx.update.callback_query['data'];
    const [, /**/ forwardMessageId, chatId, originalMessageId] = (
      data || ''
    ).split('&');

    await this.bot.telegram.forwardMessage(
      +chatId,
      +chatId,
      +originalMessageId
    );
    await this.bot.telegram.sendMessage(
      chatId,
      '–ñ–∞–ª—å, –Ω–æ —Ç–≤–æ–π –º–µ–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –ø–æ–∫–∞–∑–∞–ª—Å—è –Ω–µ —Å–º–µ—à–Ω—ã–º –∏–ª–∏ –±—ã–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã.'
    );

    await ctx.deleteMessage();
    await ctx.deleteMessage(+forwardMessageId);
  }

  @Action(/admin_approve_requested_meme/)
  async onAdminApproveMeme(
    @Ctx() ctx: Context & { update: TelegramUpdate.CallbackQueryUpdate }
  ) {
    const data = ctx.update.callback_query && ctx.update.callback_query['data'];
    const [, /**/ forwardMessageId, userChatId, userMemeMessageId] = (
      data || ''
    ).split('&');

    const userChat = await this.bot.telegram.getChat(userChatId);
    await this.bot.telegram.forwardMessage(
      +userChatId,
      +userChatId,
      +userMemeMessageId
    );
    await this.bot.telegram.sendMessage(
      userChatId,
      '–¢–≤–æ–π –º–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üòç\n' +
        '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–º–µ—à–Ω—ã–º–∏ –º–µ–º–∞–º–∏, –ø—Ä–∏—Å—ã–ª–∞–π –µ—â–µ! üòâ\n' +
        '–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                url: `https://t.me/${this.baseConfigService.memeChatName}`,
              },
            ],
          ],
        },
      }
    );

    await this.bot.telegram.copyMessage(
      this.memeChannelId,
      +userChatId,
      +userMemeMessageId,
      {
        caption: `–ú–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª @${userChat['username']}`,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–∏—Å–ª–∞—Ç—å –º–µ–º',
                url: `https://t.me/${ctx.botInfo.username}`,
              },
            ],
          ],
        },
      }
    );

    await ctx.deleteMessage();
    await ctx.deleteMessage(+forwardMessageId);
  }


  @Action(/admin_send_to_test/)
  async onSendToTest(
    @Ctx() ctx: Context & { update: TelegramUpdate.CallbackQueryUpdate }
  ) {
    const data = ctx.update.callback_query && ctx.update.callback_query['data'];
    const [, /**/ forwardMessageId, userChatId, userMemeMessageId] = (
      data || ''
    ).split('&');

    const userChat = await this.bot.telegram.getChat(userChatId);

    await this.bot.telegram.copyMessage(
      this.testChannelId,
      +userChatId,
      +userMemeMessageId,
      {
        caption: `–ú–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª @${userChat['username']}`,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–∏—Å–ª–∞—Ç—å –º–µ–º',
                url: `https://t.me/${ctx.botInfo.username}`,
              },
            ],
          ],
        },
      }
    );
  }


  private getRandomApproveMember(): {
    userId: number;
    type: 'moderator' | 'admin';
  } {
    const types = CommonService.getRandomValueFromArray(['admin', 'moderator']);
    switch (types) {
      case 'moderator':
        return {
          userId: CommonService.getRandomValueFromArray(this.moderatorIds),
          type: 'moderator',
        };
      case 'admin':
      default:
        return {
          userId: CommonService.getRandomValueFromArray(this.adminIds),
          type: 'admin',
        };
    }
  }

}
