import { Scene, SceneEnter, Ctx, On, Message, Action } from 'nestjs-telegraf';
import { Context } from '../interfaces/context.interface';
import { HELLO_SCENE_ID } from './hello.scene';
import { MemeManagementService } from '../services/meme-management.service';
import { UseFilters } from '@nestjs/common';
import { TelegrafExceptionFilter } from '../filters/telegraf-exception.filter';

export const SEND_MEME_SCENE = 'SEND_MEME_SCENE';
@Scene(SEND_MEME_SCENE)
@UseFilters(TelegrafExceptionFilter)
export class SendMemeScene {
  constructor(private memeManagementService: MemeManagementService) {}
  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Context): Promise<void> {
    const text =
      '–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–º–µ—à–Ω–æ, —Ç–æ –µ–≥–æ –æ–ø—É–±–ª–∏–∫—É—é—Ç';
    const message = await ctx.reply(text, {
      reply_markup: this.commonMemeButtons,
    });

    ctx.scene.session.state = { previousMessage: message.message_id };
  }

  @On('message')
  async onSceneMessage(
    @Ctx() ctx: Context,
    @Message() message: Context['message']
  ): Promise<void> {
    if (ctx.scene.session.state['previousMessage']) {
      await ctx.deleteMessage(ctx.scene.session.state['previousMessage']);
      ctx.scene.session.state['previousMessage'] = null;
    }

    if (!this.checkAllowedContent(ctx, message)) {
      return;
    }

    await this.memeManagementService.sendMemeToApprove(message);

    await ctx.reply('–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ üòé');
    await ctx.scene.leave();
    await ctx.scene.enter(HELLO_SCENE_ID);
  }

  @Action('show_rules')
  async onLeaveScene(@Ctx() ctx: Context) {
    const text =
      '<b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:</b>\n' +
      '- –°–º–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n' +
      '- –°–º–µ—à–Ω—ã–µ –≤–∏–¥–µ–æ\n\n' +
      '<b>–ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–π –º–µ–º:</b>\n' +
      '- –ü–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏–ª–∏ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞\n' +
      '- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω—É –º–µ–º –ø–æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ —Å–º–µ—à–Ω—ã–º\n' +
      '- –ü—É–±–ª–∏–∫—É–µ–º—ã–µ –º–µ–º—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–≤—Ç–æ—Ä–æ–º\n' +
      '- –ú–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ —Å—Ä–∞–∑—É\n';
    await ctx.replyWithHTML(text);
  }

  private get commonMemeButtons() {
    return {
      inline_keyboard: [
        [{ text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞', callback_data: 'show_rules' }],
        [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'leave_scene' }],
      ],
    };
  }

  private checkAllowedContent(
    ctx: Context,
    message: Context['message']
  ): boolean {
    if (message['voice']) {
      ctx.reply(
        '–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –∏–∑–≤–∏–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ',
        {
          reply_markup: this.commonMemeButtons,
        }
      );
      return false;
    }

    if (message['sticker']) {
      ctx.reply(
        '–°—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –∏–∑–≤–∏–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ',
        {
          reply_markup: this.commonMemeButtons,
        }
      );
      return false;
    }

    if (message['text']) {
      ctx.reply(
        '–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –º–æ–∂–µ—Ç –¥–∞–∂–µ –∏ —Å–º–µ—à–Ω–æ–π, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, –∏–∑–≤–∏–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ',
        {
          reply_markup: this.commonMemeButtons,
        }
      );
      return false;
    }

    if (message['video_note']) {
      ctx.reply(
        '–ö—Ä—É–∂–æ—á–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, –∏–∑–≤–∏–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ',
        {
          reply_markup: this.commonMemeButtons,
        }
      );
      return false;
    }

    if (message['animation']) {
      ctx.reply(
        '–ì–∏—Ñ–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –∏–∑–≤–∏–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ',
        {
          reply_markup: this.commonMemeButtons,
        }
      );
      return false;
    }

    return true;
  }
}
